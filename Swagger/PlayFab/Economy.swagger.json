{
  "swagger": "2.0",
  "info": {
    "version": "190627",
    "title": "PlayFab Economy API",
    "description": "API methods for managing User Generated Content. API methods for managing the catalog. Inventory manages in-game assets for any given entity.",
    "termsOfService": "https://playfab.com/terms/",
    "contact": {
      "url": "https://community.playfab.com/index.html"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/PlayFab/API_Specs/blob/master/LICENSE"
    }
  },
  "host": "titleId.playfabapi.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/Catalog/CreateBundle": {
      "post": {
        "operationId": "CreateBundle",
        "tags": [
          "Catalog"
        ],
        "description": "Create a bundle",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/CreateBundle"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateBundleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateBundleResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, and bundle details, create a bundle.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/CreateCurrency": {
      "post": {
        "operationId": "CreateCurrency",
        "tags": [
          "Catalog"
        ],
        "description": "Create a currency",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/CreateCurrency"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateCurrencyRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateCurrencyResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, and currency details, create a currency.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/CreateDraftItem": {
      "post": {
        "operationId": "CreateDraftItem",
        "tags": [
          "Catalog"
        ],
        "description": "Creates a new item in the working catalog using provided metadata.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/CreateDraftItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateDraftItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDraftItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The item will not be published to the public catalog until the PublishItem API is called for the item.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemMetadataInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/CreateOrUpdateReview": {
      "post": {
        "operationId": "CreateOrUpdateReview",
        "tags": [
          "Catalog"
        ],
        "description": "Creates or updates a review for the specified item.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/CreateOrUpdateReview"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateOrUpdateReviewRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateOrUpdateReviewResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/CreateStore": {
      "post": {
        "operationId": "CreateStore",
        "tags": [
          "Catalog"
        ],
        "description": "Create a store",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/CreateStore"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateStoreRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateStoreResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, and store details, create a store. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/CreateSubscription": {
      "post": {
        "operationId": "CreateSubscription",
        "tags": [
          "Catalog"
        ],
        "description": "Create a subscription",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/CreateSubscription"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateSubscriptionRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateSubscriptionResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, and subscription details, create a subscription ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/CreateUploadUrls": {
      "post": {
        "operationId": "CreateUploadUrls",
        "tags": [
          "Catalog"
        ],
        "description": "Creates one or more upload URLs which can be used by the client to upload raw file data.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/CreateUploadUrls"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateUploadUrlsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateUploadUrlsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Upload URLs point to Azure Blobs; clients must follow the Microsoft Azure Storage Blob Service REST API pattern for uploading content. The response contains upload URLs and IDs for each file. The IDs and URLs returned must be added to the item metadata and commited using the CreateDraftItem or UpdateDraftItem Item APIs.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogOneOrMoreFilesInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/DeleteBundleByFriendlyId": {
      "post": {
        "operationId": "DeleteBundleByFriendlyId",
        "tags": [
          "Catalog"
        ],
        "description": "Delete a bundle by friendly Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/DeleteBundleByFriendlyId"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteBundleByFriendlyIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteBundleResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type and Friendly Id, delete a bundle. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/DeleteBundleById": {
      "post": {
        "operationId": "DeleteBundleById",
        "tags": [
          "Catalog"
        ],
        "description": "Delete a bundle by Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/DeleteBundleById"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteBundleByIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteBundleResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type and Id, delete a bundle. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/DeleteItem": {
      "post": {
        "operationId": "DeleteItem",
        "tags": [
          "Catalog"
        ],
        "description": "Removes an item from working catalog and all published versions from the public catalog.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/DeleteItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/DeleteStoreByFriendlyId": {
      "post": {
        "operationId": "DeleteStoreByFriendlyId",
        "tags": [
          "Catalog"
        ],
        "description": "Delete a store by friendly Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/DeleteStoreByFriendlyId"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteStoreByFriendlyIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteStoreResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type and friendly Id, delete a store. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/DeleteStoreById": {
      "post": {
        "operationId": "DeleteStoreById",
        "tags": [
          "Catalog"
        ],
        "description": "Delete a store by Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/DeleteStoreById"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteStoreByIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteStoreResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type and Id, delete a store. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/DeleteSubscriptionByFriendlyId": {
      "post": {
        "operationId": "DeleteSubscriptionByFriendlyId",
        "tags": [
          "Catalog"
        ],
        "description": "Delete a subscription by friendly Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/DeleteSubscriptionByFriendlyId"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteSubscriptionByFriendlyIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteSubscriptionResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type and friendly Id, delete a subscription. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/DeleteSubscriptionById": {
      "post": {
        "operationId": "DeleteSubscriptionById",
        "tags": [
          "Catalog"
        ],
        "description": "Delete a subscription by Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/DeleteSubscriptionById"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteSubscriptionByIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteSubscriptionResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type and Id, delete a subscription. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/GetBundleByFriendlyId": {
      "post": {
        "operationId": "GetBundleByFriendlyId",
        "tags": [
          "Catalog"
        ],
        "description": "Get a bundle by Friendly Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetBundleByFriendlyId"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetBundleByFriendlyIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetBundleResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Retrieves the specified bundle by friendly Id.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/GetBundleById": {
      "post": {
        "operationId": "GetBundleById",
        "tags": [
          "Catalog"
        ],
        "description": "Get a bundle by Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetBundleById"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetBundleByIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetBundleResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Retrieves the specified bundle by Id.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/GetBundleByMarketplaceOfferId": {
      "post": {
        "operationId": "GetBundleByMarketplaceOfferId",
        "tags": [
          "Catalog"
        ],
        "description": "Get a bundle by marketplace offer Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetBundleByMarketplaceOfferId"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetBundleByMarketplaceOfferIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetBundleResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Retrieves the specified bundle by marketplace offer Id.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/GetCatalogConfig": {
      "post": {
        "operationId": "GetCatalogConfig",
        "tags": [
          "Catalog"
        ],
        "description": "Gets the configuration for the catalog.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetCatalogConfig"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetCatalogConfigRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetCatalogConfigResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthorized"
        ]
      }
    },
    "/Catalog/GetCurrencyById": {
      "post": {
        "operationId": "GetCurrencyById",
        "tags": [
          "Catalog"
        ],
        "description": "Retrieve a currency by id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetCurrencyById"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetCurrencyByIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetCurrencyByIdResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/GetDraftItem": {
      "post": {
        "operationId": "GetDraftItem",
        "tags": [
          "Catalog"
        ],
        "description": "Retrieves an item from the working catalog. This item represents the current working state of the catalog item.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetDraftItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetDraftItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetDraftItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/GetDraftItems": {
      "post": {
        "operationId": "GetDraftItems",
        "tags": [
          "Catalog"
        ],
        "description": "Retrieves a paginated list of the items from the draft catalog.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetDraftItems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetDraftItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetDraftItemsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/GetItemReviews": {
      "post": {
        "operationId": "GetItemReviews",
        "tags": [
          "Catalog"
        ],
        "description": "Get a paginated set of reviews associated with the specified item.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetItemReviews"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetReviewsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetReviewsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogItemIdInvalid",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/GetItemReviewSummary": {
      "post": {
        "operationId": "GetItemReviewSummary",
        "tags": [
          "Catalog"
        ],
        "description": "Get a summary of all reviews associated with the specified item.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetItemReviewSummary"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ReviewSummaryRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReviewSummaryResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogItemIdInvalid",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/GetMyReview": {
      "post": {
        "operationId": "GetMyReview",
        "tags": [
          "Catalog"
        ],
        "description": "Gets the submitted review for the specifed item by the authenticated user.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetMyReview"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetMyReviewRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetMyReviewResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/GetPublishedItem": {
      "post": {
        "operationId": "GetPublishedItem",
        "tags": [
          "Catalog"
        ],
        "description": "Retrieves an item from the public catalog.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetPublishedItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetPublishedItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetPublishedItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogItemIdInvalid",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/GetPublishStatus": {
      "post": {
        "operationId": "GetPublishStatus",
        "tags": [
          "Catalog"
        ],
        "description": "Gets the status of a publish of an item.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetPublishStatus"
        },
        "parameters": [
          {
            "$ref": "#/parameters/PublishStatusRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PublishStatusResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/GetStoreByFriendlyId": {
      "post": {
        "operationId": "GetStoreByFriendlyId",
        "tags": [
          "Catalog"
        ],
        "description": "Get a store by Friendly Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetStoreByFriendlyId"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetStoreByFriendlyIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetStoreResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Retrieves the specified store by FriendlyId. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/GetStoreById": {
      "post": {
        "operationId": "GetStoreById",
        "tags": [
          "Catalog"
        ],
        "description": "Get a store by Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetStoreById"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetStoreByIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetStoreResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Retrieves the specified store by Id. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/GetSubscriptionByFriendlyId": {
      "post": {
        "operationId": "GetSubscriptionByFriendlyId",
        "tags": [
          "Catalog"
        ],
        "description": "Get a subscription by Friendly Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetSubscriptionByFriendlyId"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetSubscriptionByFriendlyIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetSubscriptionResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Retrieves the specified subscription by FriendlyId.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/GetSubscriptionById": {
      "post": {
        "operationId": "GetSubscriptionById",
        "tags": [
          "Catalog"
        ],
        "description": "Get a subscription by Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetSubscriptionById"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetSubscriptionByIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetSubscriptionResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Retrieves the specified subscription by Id.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/GetSubscriptionByMarketplaceOfferId": {
      "post": {
        "operationId": "GetSubscriptionByMarketplaceOfferId",
        "tags": [
          "Catalog"
        ],
        "description": "Get a subscription by marketplace offer Id",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetSubscriptionByMarketplaceOfferId"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetSubscriptionByMarketplaceOfferIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetSubscriptionResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Retrieves the specified subscription by MarketplaceOfferId.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/PublishItem": {
      "post": {
        "operationId": "PublishItem",
        "tags": [
          "Catalog"
        ],
        "description": "Initiates a publish of an item from the working catalog to the public catalog.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/PublishItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/PublishItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PublishItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/PurchaseItemByFriendlyId": {
      "post": {
        "operationId": "PurchaseItemByFriendlyId",
        "tags": [
          "Catalog"
        ],
        "description": "Purchase an item, bundle or subscription by friendly id.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/PurchaseItemByFriendlyId"
        },
        "parameters": [
          {
            "$ref": "#/parameters/PurchaseItemByFriendlyIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PurchaseItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Purchase a single item, bundle or subscription by friendly id, paying the associated price.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/PurchaseItemById": {
      "post": {
        "operationId": "PurchaseItemById",
        "tags": [
          "Catalog"
        ],
        "description": "Purchase an item, bundle or subscription by id.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/PurchaseItemById"
        },
        "parameters": [
          {
            "$ref": "#/parameters/PurchaseItemByIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PurchaseItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Purchase a single item, bundle or subscription by id, paying the associated price.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/ReportReview": {
      "post": {
        "operationId": "ReportReview",
        "tags": [
          "Catalog"
        ],
        "description": "Submit a report for a review",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/ReportReview"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ReportReviewRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReportReviewResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Submit a report for an inappropriate review, allowing the submitting user to specify their concern.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/Search": {
      "post": {
        "operationId": "Search",
        "tags": [
          "Catalog"
        ],
        "description": "Execute a search against the public catalog using the provided search parameters and returns a set of paginated results.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/Search"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CatalogSearchRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CatalogSearchResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogSearchParameterInvalid",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/SearchBundles": {
      "post": {
        "operationId": "SearchBundles",
        "tags": [
          "Catalog"
        ],
        "description": "Execute a search against the set of all bundles, using the provided search parameters and returns a set of paginated results",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SearchBundles"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SearchBundlesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SearchBundlesResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, search text and/or (filter, orderby, skip, top and ExpandReferencedItems), search for bundles. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/SearchForItemsContainingItemByFriendlyId": {
      "post": {
        "operationId": "SearchForItemsContainingItemByFriendlyId",
        "tags": [
          "Catalog"
        ],
        "description": "Search for a given item (by friendly id) and return a set of bundles/subscriptions/stores containing the item",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SearchForItemsContainingItemByFriendlyId"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SearchForItemsContainingItemByFriendlyIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SearchForItemsContainingItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an item friendlyid and a container type (bundles/subscriptions/stores or a combination of those), return a set of bundles/subscriptions/stores containing the item.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/SearchForItemsContainingItemById": {
      "post": {
        "operationId": "SearchForItemsContainingItemById",
        "tags": [
          "Catalog"
        ],
        "description": "Search for a given item (by id) and return a set of bundles/subscriptions/stores containing the item",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SearchForItemsContainingItemById"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SearchForItemsContainingItemByIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SearchForItemsContainingItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an item id and a container type (bundles/subscriptions/stores or a combination of those), return a set of bundles/subscriptions/stores containing the item.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/SearchInStoreByFriendlyId": {
      "post": {
        "operationId": "SearchInStoreByFriendlyId",
        "tags": [
          "Catalog"
        ],
        "description": "Execute a search against a specified store (by friendly id) using the provided search parameters and return a set of paginated results",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SearchInStoreByFriendlyId"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SearchInStoreByFriendlyIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SearchInStoreResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given a store friendlyId, search text and/or (filter, orderby, skip, top), search for items within the store that satisfy the search conditions. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/SearchInStoreById": {
      "post": {
        "operationId": "SearchInStoreById",
        "tags": [
          "Catalog"
        ],
        "description": "Execute a search against a specified store (by id) using the provided search parameters and return a set of paginated results",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SearchInStoreById"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SearchInStoreByIdRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SearchInStoreResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given a store id, search text and/or (filter, orderby, skip, top), search for items within the store that satisfy the search conditions.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/SearchStores": {
      "post": {
        "operationId": "SearchStores",
        "tags": [
          "Catalog"
        ],
        "description": "Execute a search against the set of all stores, using the provided search parameters and returns a set of paginated results",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SearchStores"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SearchStoresRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SearchStoresResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, search text and/or (filter, orderby, skip, top and ExpandReferencedItems), search for stores. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/SearchSubscriptions": {
      "post": {
        "operationId": "SearchSubscriptions",
        "tags": [
          "Catalog"
        ],
        "description": "Execute a search against the set of all subscriptions, using the provided search parameters and returns a set of paginated results",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SearchSubscriptions"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SearchSubscriptionsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SearchSubscriptionsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, search text and/or (filter, orderby, skip, top and ExpandReferencedItems), search for subscriptions. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/SubmitHelpfulnessVote": {
      "post": {
        "operationId": "SubmitHelpfulnessVote",
        "tags": [
          "Catalog"
        ],
        "description": "Submit a vote for a review, indicating whether the review was helpful or unhelpful.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SubmitHelpfulnessVote"
        },
        "parameters": [
          {
            "$ref": "#/parameters/HelpfulnessVoteRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/HelpfulnessVoteResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/TakedownReviews": {
      "post": {
        "operationId": "TakedownReviews",
        "tags": [
          "Catalog"
        ],
        "description": "Submit a request to takedown one or more reviews.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/TakedownReviews"
        },
        "parameters": [
          {
            "$ref": "#/parameters/TakedownReviewsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/TakedownReviewsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Submit a request to takedown one or more reviews, removing them from public view. Authors will still be able to see their reviews after being taken down.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/UpdateBundle": {
      "post": {
        "operationId": "UpdateBundle",
        "tags": [
          "Catalog"
        ],
        "description": "Update a bundle",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/UpdateBundle"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateBundleRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateBundleResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, and bundle details, update a bundle. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/UpdateCatalogConfig": {
      "post": {
        "operationId": "UpdateCatalogConfig",
        "tags": [
          "Catalog"
        ],
        "description": "Gets the configuration for the catalog.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/UpdateCatalogConfig"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateCatalogConfigRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateCatalogConfigResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogConfigInvalid"
        ]
      }
    },
    "/Catalog/UpdateCurrency": {
      "post": {
        "operationId": "UpdateCurrency",
        "tags": [
          "Catalog"
        ],
        "description": "Update a currency",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/UpdateCurrency"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateCurrencyRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateCurrencyResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/UpdateDraftItem": {
      "post": {
        "operationId": "UpdateDraftItem",
        "tags": [
          "Catalog"
        ],
        "description": "Update the metadata for an item in the working catalog.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/UpdateDraftItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateDraftItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDraftItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemMetadataInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/Catalog/UpdateStore": {
      "post": {
        "operationId": "UpdateStore",
        "tags": [
          "Catalog"
        ],
        "description": "Update a store",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/UpdateStore"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateStoreRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateStoreResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, and store details, update a store. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Catalog/UpdateSubscription": {
      "post": {
        "operationId": "UpdateSubscription",
        "tags": [
          "Catalog"
        ],
        "description": "Update a subscription",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/UpdateSubscription"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateSubscriptionRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateSubscriptionResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type and subscription details, update a subscription.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Inventory/AddVirtualCurrencies": {
      "post": {
        "operationId": "AddVirtualCurrencies",
        "tags": [
          "Inventory"
        ],
        "description": "Increase virtual currencies amount.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/AddVirtualCurrencies"
        },
        "parameters": [
          {
            "$ref": "#/parameters/AddVirtualCurrenciesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AddVirtualCurrenciesResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will increase the entity's currencies by a specific amount. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "ForbiddenByEntityPolicy",
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Inventory/ConsumeInventoryItems": {
      "post": {
        "operationId": "ConsumeInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Consume inventory items.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/ConsumeInventoryItems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ConsumeInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ConsumeInventoryItemsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will consume the specified inventory items. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "ForbiddenByEntityPolicy",
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Inventory/GetInventoryItems": {
      "post": {
        "operationId": "GetInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Get current inventory items.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetInventoryItems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetInventoryItemsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will get the entity's inventory items. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "ForbiddenByEntityPolicy",
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Inventory/GetVirtualCurrencies": {
      "post": {
        "operationId": "GetVirtualCurrencies",
        "tags": [
          "Inventory"
        ],
        "description": "Get current virtual currencies.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetVirtualCurrencies"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetVirtualCurrenciesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetVirtualCurrenciesResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will get the entity's virtual currencies. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "ForbiddenByEntityPolicy",
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Inventory/GrantInventoryItems": {
      "post": {
        "operationId": "GrantInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Grant inventory items.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GrantInventoryItems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GrantInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GrantInventoryItemsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will grant the specified inventory items. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "ForbiddenByEntityPolicy",
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Inventory/SetInventoryItems": {
      "post": {
        "operationId": "SetInventoryItems",
        "tags": [
          "Inventory"
        ],
        "description": "Set inventory items",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SetInventoryItems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SetInventoryItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SetInventoryItemsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will set the entity's inventory items",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "ForbiddenByEntityPolicy",
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Inventory/SetVirtualCurrencies": {
      "post": {
        "operationId": "SetVirtualCurrencies",
        "tags": [
          "Inventory"
        ],
        "description": "Set virtual currencies",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SetVirtualCurrencies"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SetVirtualCurrenciesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SetVirtualCurrenciesResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will set the entity's currencies to a specific amount. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "ForbiddenByEntityPolicy",
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Inventory/SubtractVirtualCurrencies": {
      "post": {
        "operationId": "SubtractVirtualCurrencies",
        "tags": [
          "Inventory"
        ],
        "description": "Decrease virtual currencies amount.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SubtractVirtualCurrencies"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SubtractVirtualCurrenciesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SubtractVirtualCurrenciesResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Given an entity type, entity identifier and container details, will decrease the entity's currencies by a specific amount. ",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "ForbiddenByEntityPolicy",
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/Inventory/UpdateInventoryItemsProperties": {
      "post": {
        "operationId": "UpdateInventoryItemsProperties",
        "tags": [
          "Inventory"
        ],
        "description": "Update inventory Items.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/UpdateInventoryItemsProperties"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateInventoryItemsPropertiesRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateInventoryPropertiesItemsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Update the specified inventory items.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "ForbiddenByEntityPolicy",
          "NotAuthenticated",
          "NotAuthorized",
          "ProfileDoesNotExist"
        ]
      }
    },
    "/UserGeneratedContent/CreateDraftUgcItem": {
      "post": {
        "operationId": "CreateDraftUgcItem",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Creates a new community catalog item in the working catalog using provided metadata.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/CreateDraftUgcItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateDraftItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateDraftItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The item will not be published to the public catalog until the user makes a call to the PublishItem API.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemMetadataInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/UserGeneratedContent/CreateUgcUploadUrls": {
      "post": {
        "operationId": "CreateUgcUploadUrls",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Creates one or more upload URLs which can be used by the client to upload raw mod file data.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/CreateUgcUploadUrls"
        },
        "parameters": [
          {
            "$ref": "#/parameters/CreateUploadUrlsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/CreateUploadUrlsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "Upload URLs point to Azure Blobs; clients must follow the Microsoft Azure Storage Blob Service REST API pattern for uploading content. The response contains upload URLs and IDs for each file. The IDs and URLs returned must be added to the item metadata and commited using the CreateDraftItem or UpdateDraftItem Item APIs.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogOneOrMoreFilesInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/UserGeneratedContent/DeleteUgcItem": {
      "post": {
        "operationId": "DeleteUgcItem",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Removes an item from working catalog and all published versions from the public catalog.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/DeleteUgcItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/DeleteItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/UserGeneratedContent/GetDraftUgcItem": {
      "post": {
        "operationId": "GetDraftUgcItem",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Retrieves an item from the working catalog. This item represents the current working state of the community item.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetDraftUgcItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetDraftItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetDraftItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/UserGeneratedContent/GetDraftUgcItems": {
      "post": {
        "operationId": "GetDraftUgcItems",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Retrieves a paginated list of the items created by a user.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetDraftUgcItems"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetDraftItemsRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetDraftItemsResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/UserGeneratedContent/GetPublishedUgcItem": {
      "post": {
        "operationId": "GetPublishedUgcItem",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Retrieves an item from the public catalog.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetPublishedUgcItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetPublishedItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetPublishedItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogItemIdInvalid",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/UserGeneratedContent/GetUgcItemModerationState": {
      "post": {
        "operationId": "GetUgcItemModerationState",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Gets the moderation state for an item, including the concern category and string reason.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetUgcItemModerationState"
        },
        "parameters": [
          {
            "$ref": "#/parameters/GetUgcItemModerationStateRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetUgcItemModerationStateResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/UserGeneratedContent/GetUgcPublishStatus": {
      "post": {
        "operationId": "GetUgcPublishStatus",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Gets the status of a publish of an item.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/GetUgcPublishStatus"
        },
        "parameters": [
          {
            "$ref": "#/parameters/PublishStatusRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PublishStatusResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/UserGeneratedContent/PublishUgcItem": {
      "post": {
        "operationId": "PublishUgcItem",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Initiates a publish of a item from the working catalog to the public catalog.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/PublishUgcItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/PublishItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/PublishItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-requestDetails": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/UserGeneratedContent/ReportUgcItem": {
      "post": {
        "operationId": "ReportUgcItem",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Submit a report for an item, indicating in what way the item is inappropriate.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/ReportUgcItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ReportItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ReportItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/UserGeneratedContent/SetUgcItemModerationState": {
      "post": {
        "operationId": "SetUgcItemModerationState",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Sets the moderation state for an item, including the concern category and string reason.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/SetUgcItemModerationState"
        },
        "parameters": [
          {
            "$ref": "#/parameters/SetUgcItemModerationStateRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/SetUgcItemModerationStateResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemIdInvalid",
          "CatalogTitleIdMissing"
        ]
      }
    },
    "/UserGeneratedContent/UpdateDraftUgcItem": {
      "post": {
        "operationId": "UpdateDraftUgcItem",
        "tags": [
          "UserGeneratedContent"
        ],
        "description": "Update the metadata for an item in the working catalog.",
        "externalDocs": {
          "url": "https://api.playfab.com/documentation/economy/method/UpdateDraftUgcItem"
        },
        "parameters": [
          {
            "$ref": "#/parameters/UpdateDraftItemRequest"
          }
        ],
        "security": [
          {
            "EntityToken": []
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateDraftItemResult"
          },
          "400": {
            "$ref": "#/responses/ApiErrorWrapper"
          }
        },
        "x-AnyInclusiveFlags": [
          "Beta"
        ],
        "x-ms-docs-errors": [
          "CatalogClientIdentityInvalid",
          "CatalogItemMetadataInvalid",
          "CatalogPlayerIdMissing",
          "CatalogTitleIdMissing"
        ]
      }
    }
  },
  "definitions": {
    "ApiErrorWrapper": {
      "description": "The basic wrapper around every failed API response",
      "type": "object",
      "properties": {
        "code": {
          "description": "Numerical HTTP code",
          "type": "number",
          "x-actualtype": "int32"
        },
        "status": {
          "description": "String HTTP code",
          "type": "string"
        },
        "error": {
          "description": "Playfab error code",
          "type": "string"
        },
        "errorCode": {
          "description": "Numerical Playfab error code",
          "type": "number",
          "x-actualtype": "int32"
        },
        "errorMessage": {
          "description": "Description for the Playfab errorCode",
          "type": "string"
        },
        "errorDetails": {
          "description": "Detailed description of individual issues with the request object",
          "type": "object"
        }
      }
    },
    "AddVirtualCurrenciesRequest": {
      "description": "Given an entity type, entity identifier and container details, will increase the entity's currencies by a specific amount. ",
      "type": "object",
      "properties": {
        "Currencies": {
          "description": "A list of currencies to modify",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CurrencyDetails"
          },
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "required": [
        "Currencies"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "AddVirtualCurrenciesResult": {
      "type": "object",
      "properties": {
        "Currencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CurrencyResponseDto"
          },
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CatalogAlternateId": {
      "type": "object",
      "properties": {
        "Type": {
          "description": "Type of the alternate Id",
          "type": "string"
        },
        "Value": {
          "description": "Value of the alternate Id",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CatalogConfig": {
      "type": "object",
      "properties": {
        "Admins": {
          "description": "A list of title player accounts that will have admin permissions.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Catalog": {
          "$ref": "#/definitions/CatalogSpecificConfig",
          "description": "The set of configuration that only applies to catalog items.",
          "type": "object",
          "x-isclass": true
        },
        "DeepLinkFormats": {
          "description": "A list of deep link formats.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeepLinkFormat"
          },
          "x-isclass": true
        },
        "DisplayPropertyIndexInfos": {
          "description": "A list of display properties to index.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DisplayPropertyIndexInfo"
          },
          "x-isclass": true
        },
        "Reviewers": {
          "description": "A set of player entity keys that are allowed to review content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UserGeneratedContent": {
          "$ref": "#/definitions/UserGeneratedContentSpecificConfig",
          "description": "The set of configuration that only applies to user generated contents.",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CatalogItemMetadata": {
      "type": "object",
      "properties": {
        "AllowMultipleStacks": {
          "description": "Indicates whether there can be multiple stacks of this item.",
          "type": "boolean"
        },
        "AlternateIds": {
          "description": "The alternate IDs associated with this item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogAlternateId"
          },
          "x-isclass": true
        },
        "Contents": {
          "description": "The set of contents associated with this item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Content"
          },
          "x-isclass": true
        },
        "ContentType": {
          "description": "The client-defined type of the item.",
          "type": "string"
        },
        "CreationDate": {
          "description": "The date and time when this item was created.",
          "type": "string"
        },
        "CreatorEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The ID of the creator of this catalog item.",
          "type": "object",
          "x-isclass": true
        },
        "DeepLinks": {
          "description": "The set of platform specific deep links for this item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeepLink"
          },
          "x-isclass": true
        },
        "Description": {
          "description": "A dictionary of localized descriptions. Key is language code and localized string is the value. The neutral locale is required.",
          "type": "object"
        },
        "DisplayProperties": {
          "description": "Game specific properties for display purposes. This is an arbitrary JSON blob.",
          "type": "object"
        },
        "DisplayVersion": {
          "description": "The user provided version of the item for display purposes.",
          "type": "string"
        },
        "EndDate": {
          "description": "The date of when the item will cease to be available. If not provided then the product will be available indefinitely.",
          "type": "string"
        },
        "ETag": {
          "description": "The current ETag value that can be used for optimistic concurrency in the If-None-Match header.",
          "type": "string"
        },
        "Id": {
          "description": "The unique ID of the item.",
          "type": "string"
        },
        "Images": {
          "description": "The images associated with this item. Images can be thumbnails or screenshots.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          },
          "x-isclass": true
        },
        "IsConsumable": {
          "description": "Indicates whether the item is a consumable or durable.",
          "type": "boolean"
        },
        "IsHidden": {
          "description": "Indicates if the item is hidden.",
          "type": "boolean"
        },
        "IsStackable": {
          "description": "Indicates if this item can be stacked or if they should be handled individually.",
          "type": "boolean"
        },
        "ItemReferences": {
          "description": "The item references associated with this item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItemReference"
          },
          "x-isclass": true
        },
        "LastModifiedDate": {
          "description": "The date and time this item was last updated.",
          "type": "string"
        },
        "Moderation": {
          "$ref": "#/definitions/ModerationState",
          "description": "The moderation state for this item.",
          "type": "object",
          "x-isclass": true
        },
        "PayoutInfo": {
          "$ref": "#/definitions/PayoutInfo",
          "description": "The payout information of the payee.",
          "type": "object",
          "x-isclass": true
        },
        "Platforms": {
          "description": "The platforms supported by this item.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Price": {
          "$ref": "#/definitions/CatalogPrice",
          "description": "The base price of this item.",
          "type": "object",
          "x-isclass": true
        },
        "Rating": {
          "$ref": "#/definitions/Rating",
          "description": "Rating summary for this UGC item.",
          "type": "object",
          "x-isclass": true
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace that this item belongs to.",
          "type": "object",
          "x-isclass": true
        },
        "StartDate": {
          "description": "The date of when the item will be available. If not provided then the product will appear immediately.",
          "type": "string"
        },
        "Subscription": {
          "$ref": "#/definitions/SubscriptionDetails",
          "description": "Additional metadata for subscription items.",
          "type": "object",
          "x-isclass": true
        },
        "Tags": {
          "description": "The list of tags that are associated with this item.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Title": {
          "description": "A dictionary of localized titles. Key is language code and localized string is the value. The neutral locale is required.",
          "type": "object"
        },
        "Type": {
          "description": "The high-level type of the item.",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CatalogItemReference": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount of the catalog item.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Id": {
          "description": "The unique ID of the catalog item.",
          "type": "string"
        },
        "Price": {
          "$ref": "#/definitions/CatalogPrice",
          "description": "The price of the catalog item.",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CatalogPrice": {
      "type": "object",
      "properties": {
        "PayoutAmount": {
          "description": "The amount the payee will receive.",
          "type": "number",
          "x-actualtype": "double"
        },
        "Prices": {
          "description": "Prices of the catalog item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogPriceInstance"
          },
          "x-isclass": true
        },
        "Sort": {
          "description": "Sort setting of the catalog item.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CatalogPriceAmount": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The amount of the catalog price.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CurrencyId": {
          "description": "The currency ID of the catalog price.",
          "type": "string"
        }
      },
      "required": [
        "Amount"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CatalogPriceInstance": {
      "type": "object",
      "properties": {
        "Amounts": {
          "description": "The amounts of the catalog item price.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogPriceAmount"
          },
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CatalogSearchRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Filter": {
          "description": "An OData filter used to refine the search query.",
          "type": "string"
        },
        "OrderBy": {
          "description": "An OData orderBy used to order the results of the search query.",
          "type": "string"
        },
        "Search": {
          "description": "The text to search for.",
          "type": "string"
        },
        "Select": {
          "description": "An OData select query option used to augment the search results. If not defined, the default search result metadata will be returned.",
          "type": "string"
        },
        "Skip": {
          "description": "The number of results to skip.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace to search under.",
          "type": "object",
          "x-isclass": true
        },
        "TitleId": {
          "description": "The ID of the title that this catalog item is associated with.",
          "type": "string"
        },
        "Top": {
          "description": "The number of results to retrieve.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Skip",
        "Top"
      ],
      "example": {
        "Search": "Pirates",
        "Filter": "tags/any(t:t eq 'desert') and contentType eq 'map'",
        "OrderBy": "lastModifiedDate asc",
        "Top": 10,
        "Select": "contents,images"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CatalogSearchResult": {
      "type": "object",
      "properties": {
        "Count": {
          "description": "The total count of hits for the search query.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Items": {
          "description": "The paginated set of results for the search query.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItemMetadata"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Count": 261,
        "Items": []
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CatalogSpecificConfig": {
      "type": "object",
      "properties": {
        "ContentTypes": {
          "description": "The set of content types that will be used for validation and if no values are provided then anything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Tags": {
          "description": "The set of tags that will be used for validation and if no values are provided then anything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ConcernCategory": {
      "type": "object",
      "enum": [
        "None",
        "OffensiveContent",
        "ChildExploitation",
        "MalwareOrVirus",
        "PrivacyConcerns",
        "MisleadingApp",
        "PoorPerformance",
        "ReviewResponse",
        "SpamAdvertising",
        "Profanity"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ConsumeInventoryItemsRequest": {
      "description": "Given an entity type, entity identifier and container details, will consume the specified inventory items. ",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Items": {
          "description": "A list of Items to modify",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItemDetails"
          },
          "x-isclass": true
        }
      },
      "required": [
        "Items"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ConsumeInventoryItemsResult": {
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItemResponseDto"
          },
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ContainerType": {
      "type": "object",
      "enum": [
        "None",
        "Bundles",
        "Stores",
        "Subscriptions"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "Content": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "MaxClientVersion": {
          "description": "The maximum client version that this content is compatible with.",
          "type": "string"
        },
        "MinClientVersion": {
          "description": "The minimum client version that this content is compatible with.",
          "type": "string"
        },
        "Tags": {
          "description": "The list of tags that are associated with this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Type": {
          "description": "The client-defined type of the content.",
          "type": "string"
        },
        "Url": {
          "description": "The Azure CDN URL for retrieval of the catalog item binary content.",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateBundleRequest": {
      "description": "Create bundle request",
      "type": "object",
      "properties": {
        "AllowOverwrite": {
          "description": "Allow overwrite",
          "type": "boolean"
        },
        "Bundle": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Bundle details",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "required": [
        "Bundle",
        "AllowOverwrite"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateBundleResult": {
      "description": "Create bundle result",
      "type": "object",
      "properties": {
        "Bundle": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateCurrencyRequest": {
      "description": "Given an entity type, and currency details, create a currency.",
      "type": "object",
      "properties": {
        "Currency": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Metadata describing the new currency item to be created.",
          "type": "object",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Currency"
      ],
      "example": {
        "Currency": {
          "AlternateIds": [
            {
              "Type": "FriendlyId",
              "Value": "AU"
            }
          ],
          "Title": {
            "neutral": "gold"
          },
          "IsHidden": false,
          "StartDate": "2018-08-17T22:32:10.4729879+00:00",
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Tag": "display",
              "Type": "thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/gold_thumb.jpg"
            }
          ],
          "ETag": "opaqueString"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateCurrencyResult": {
      "type": "object",
      "properties": {
        "CurrencyMetadata": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Updated metadata describing the catalog item just created.",
          "type": "object",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "CurrencyMetadata": {
          "Id": "00000000-0000-0000-0000-000000000004",
          "AlternateIds": [
            {
              "Type": "FriendlyId",
              "Value": "AU"
            }
          ],
          "Title": {
            "neutral": "gold"
          },
          "IsHidden": false,
          "StartDate": "2018-08-17T22:32:10.4729879+00:00",
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Tag": "display",
              "Type": "thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/gold_thumb.jpg"
            }
          ],
          "ETag": "opaqueString"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateDraftItemRequest": {
      "description": "The item will not be published to the public catalog until the user makes a call to the PublishItem API.",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Item": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Metadata describing the new catalog item to be created.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Item"
      ],
      "example": {
        "Item": {
          "Title": {
            "neutral": "Neutral title",
            "en-US": "US English title"
          },
          "Description": {
            "neutral": "Neutral description",
            "en-US": "US English description"
          },
          "ContentType": "example catalog item",
          "IsHidden": false,
          "Platforms": [
            "android",
            "xboxone",
            "ios"
          ],
          "Tags": [
            "pirates",
            "holiday"
          ],
          "DisplayVersion": "1.0.0",
          "Contents": [
            {
              "Id": "00000000-0000-0000-0000-000000000001",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
              "MaxClientVersion": "2.4.1",
              "MinClientVersion": "2.0.0",
              "Tags": [
                "pirate",
                "desert"
              ],
              "Type": "textures"
            }
          ],
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Tag": "splashscreen",
              "Type": "thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
            }
          ],
          "DisplayProperties": {
            "mapDetails": {
              "mapType": "desertIsland",
              "gameMode": "capture",
              "maxPlayers": 16
            },
            "averageMatchLengthInSeconds": 947
          },
          "ETag": "opaqueString"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateDraftItemResult": {
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Updated metadata describing the catalog item just created.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Item": {
          "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
          "Title": {
            "neutral": "Neutral title",
            "en-US": "US English title"
          },
          "Description": {
            "neutral": "Neutral description",
            "en-US": "US English description"
          },
          "ContentType": "example item",
          "CreatorEntityKey": {
            "Id": "someId",
            "Type": "title_player_account",
            "TypeString": "title_player_account"
          },
          "IsHidden": false,
          "Platforms": [
            "android",
            "xboxone",
            "ios"
          ],
          "Tags": [
            "pirates",
            "holiday"
          ],
          "DisplayVersion": "1.0.0",
          "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
          "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
          "Contents": [
            {
              "Id": "00000000-0000-0000-0000-000000000001",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
              "MaxClientVersion": "2.4.1",
              "MinClientVersion": "2.0.0",
              "Tags": [
                "pirate",
                "desert"
              ],
              "Type": "textures"
            }
          ],
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Tag": "splashscreen",
              "Type": "thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
            }
          ],
          "DisplayProperties": {
            "mapDetails": {
              "mapType": "desertIsland",
              "gameMode": "capture",
              "maxPlayers": 16
            },
            "averageMatchLengthInSeconds": 947
          },
          "ETag": "opaqueString"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateOrUpdateReviewRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "The ID of the item to submit a review for.",
          "type": "string"
        },
        "Review": {
          "$ref": "#/definitions/ReviewSubmission",
          "description": "The review to submit.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
        "Review": {
          "Title": "Best Game Ever",
          "ReviewText": "I play this game every day. It's my favorite game yet.",
          "Rating": 5,
          "IsInstalled": true,
          "ItemVersion": "2.4.1"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateOrUpdateReviewResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateStoreRequest": {
      "description": "Create store request",
      "type": "object",
      "properties": {
        "AllowOverwrite": {
          "description": "Allow overwrite",
          "type": "boolean"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Store": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Store details",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Store",
        "AllowOverwrite"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateStoreResult": {
      "description": "Create store result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Store": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateSubscriptionRequest": {
      "description": "Create subscription request",
      "type": "object",
      "properties": {
        "AllowOverwrite": {
          "description": "Allow overwrite",
          "type": "boolean"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Subscription": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Subscription details",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Subscription",
        "AllowOverwrite"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateSubscriptionResult": {
      "description": "Create subscription result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Subscription": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateUploadUrlsRequest": {
      "description": "Upload URLs point to Azure Blobs; clients must follow the Microsoft Azure Storage Blob Service REST API pattern for uploading content. The response contains upload URLs and IDs for each file. The IDs and URLs returned must be added to the item metadata and commited using the CreateDraftItem or UpdateDraftItem Item APIs.",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Files": {
          "description": "Description of the files to be uploaded by the client.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadInfo"
          },
          "x-isclass": true
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace that this content belongs to.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Files": [
          {
            "FileName": "textures.zip",
            "FileSize": 100
          },
          {
            "FileName": "sprites.png",
            "FileSize": 200
          }
        ]
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CreateUploadUrlsResult": {
      "type": "object",
      "properties": {
        "UploadUrls": {
          "description": "Urls and metadata for the files to be uploaded by the client.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UploadUrlMetadata"
          },
          "x-isclass": true
        }
      },
      "example": {
        "UploadUrls": [
          {
            "Id": "11111111-1111-1111-1111-111111111111",
            "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/11111111-1111-1111-1111-111111111111/textures.zip",
            "FileName": "textures.zip"
          },
          {
            "Id": "22222222-2222-2222-2222-222222222222",
            "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/22222222-2222-2222-2222-222222222222/sprites.png",
            "FileName": "sprites.png"
          }
        ]
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CurrencyDetails": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "type": "object",
          "x-isclass": true
        },
        "Amount": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "CurrencyId": {
          "type": "string"
        },
        "InstanceId": {
          "type": "string"
        }
      },
      "required": [
        "Amount"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "CurrencyResponseDto": {
      "type": "object",
      "properties": {
        "Amount": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "ChangedAmount": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "CurrencyId": {
          "type": "string"
        }
      },
      "required": [
        "Amount"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeepLink": {
      "type": "object",
      "properties": {
        "Platform": {
          "description": "Target platform for this deep link.",
          "type": "string"
        },
        "Url": {
          "description": "The deep link for this platform.",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeepLinkFormat": {
      "type": "object",
      "properties": {
        "Format": {
          "description": "The format of the deep link to return. The format should contain '{id}' to represent where the item ID should be placed.",
          "type": "string"
        },
        "Platform": {
          "description": "The target platform for the deep link.",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteBundleByFriendlyIdRequest": {
      "description": "Delete bundle by friendly Id request",
      "type": "object",
      "properties": {
        "FriendlyId": {
          "description": "The friendly Id of target bundle.",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the bundle is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteBundleByIdRequest": {
      "description": "Delete bundle by Id request",
      "type": "object",
      "properties": {
        "Id": {
          "description": "Id of target bundle",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the bundle is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteBundleResult": {
      "description": "Delete bundle result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteItemRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "ID of the catalog item to delete.",
          "type": "string"
        }
      },
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteItemResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteStoreByFriendlyIdRequest": {
      "description": "Delete store by Friendly Id request",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "FriendlyId": {
          "description": "The friendly Id of target store.",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the store is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteStoreByIdRequest": {
      "description": "Delete store by Id request",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Id": {
          "description": "Id of target store",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the store is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteStoreResult": {
      "description": "Delete store result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteSubscriptionByFriendlyIdRequest": {
      "description": "Delete Subscription by friendly Id request",
      "type": "object",
      "properties": {
        "FriendlyId": {
          "description": "The friendly Id of target subscription.",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the subscription is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteSubscriptionByIdRequest": {
      "description": "Delete subscription by Id request",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The Id of target subscription",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the subscription is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DeleteSubscriptionResult": {
      "description": "Delete subscription result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DisplayPropertyIndexInfo": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "The property name in the 'DisplayProperties' property to be indexed.",
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/DisplayPropertyType",
          "description": "The type of the property to be indexed.",
          "type": "string",
          "x-isenum": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "DisplayPropertyType": {
      "type": "object",
      "enum": [
        "QueryDateTime",
        "QueryDouble",
        "QueryString",
        "SearchString"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "EntityKey": {
      "description": "Combined entity type and ID structure which uniquely identifies a single entity.",
      "type": "object",
      "properties": {
        "Id": {
          "description": "Unique ID of the entity.",
          "type": "string"
        },
        "Type": {
          "description": "Entity type. See https://api.playfab.com/docs/tutorials/entities/entitytypes",
          "type": "string"
        },
        "TypeString": {
          "description": "Alternate name for Type.",
          "type": "string",
          "x-deprecation": {
            "ProposedAfter": "6/1/2018",
            "DeprecatedAfter": "7/1/2018",
            "ObsoleteAfter": "8/1/2018",
            "ReplacedBy": "Type"
          }
        }
      },
      "required": [
        "Id"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetBundleByFriendlyIdRequest": {
      "description": "Get bundle by friendly Id request",
      "type": "object",
      "properties": {
        "ExpandReferencedItems": {
          "description": "Whether to expand the referenced items",
          "type": "boolean"
        },
        "FriendlyId": {
          "description": "The friendly Id of target bundle.",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the item is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "ExpandReferencedItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetBundleByIdRequest": {
      "description": "Get bundle by Id request",
      "type": "object",
      "properties": {
        "ExpandReferencedItems": {
          "description": "Whether to expand the referenced items",
          "type": "boolean"
        },
        "Id": {
          "description": "Id of target bundle",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the item is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "ExpandReferencedItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetBundleByMarketplaceOfferIdRequest": {
      "description": "Get bundle by marketplace offer Id request",
      "type": "object",
      "properties": {
        "ExpandReferencedItems": {
          "description": "Whether to expand the referenced items",
          "type": "boolean"
        },
        "MarketplaceOfferId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "The Marketplace offer Id of target bundle.",
          "type": "object",
          "x-isclass": true
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the item is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "ExpandReferencedItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetBundleResult": {
      "description": "Get bundle result",
      "type": "object",
      "properties": {
        "Bundle": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "ReferencedItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItemMetadata"
          },
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetCatalogConfigRequest": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetCatalogConfigResult": {
      "type": "object",
      "properties": {
        "Config": {
          "$ref": "#/definitions/CatalogConfig",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Config": {
          "Admins": [
            "title_player_account!ABC123"
          ],
          "Catalog": {
            "ContentTypes": [
              "map",
              "skin"
            ],
            "Tags": [
              "sword",
              "shield"
            ]
          },
          "DeepLinkFormats": [
            {
              "Platform": "iOS",
              "Format": "mygame://item/{id}"
            }
          ],
          "DisplayPropertyIndexInfos": [
            {
              "Name": "damage",
              "Type": "QueryDouble"
            }
          ],
          "Reviewers": [
            "title_player_account!ABC123"
          ],
          "UserGeneratedContent": {
            "ContentTypes": [
              "skin"
            ],
            "Tags": [
              "sword",
              "shield"
            ]
          }
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetCurrencyByIdRequest": {
      "type": "object",
      "properties": {
        "CurrencyId": {
          "description": "ID of the currency to retrieve.",
          "type": "string"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "CurrencyId"
      ],
      "example": {
        "CurrencyId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetCurrencyByIdResult": {
      "type": "object",
      "properties": {
        "Currency": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Full metadata of the currency requested.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Currency": {}
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetDraftItemRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "ID of the catalog item to retrieve from the working catalog.",
          "type": "string"
        }
      },
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetDraftItemResult": {
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Full metadata of the catalog item requested.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Item": {}
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetDraftItemsRequest": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items created by the caller, if any are available. Should be null on initial request.",
          "type": "string"
        },
        "Count": {
          "description": "Number of items to retrieve. Maximum page size is 10.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Count"
      ],
      "example": {
        "Count": 10
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetDraftItemsResult": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of items, if any are available.",
          "type": "string"
        },
        "Count": {
          "description": "The total number of items created by the caller.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Items": {
          "description": "A set of items created by the caller.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItemMetadata"
          },
          "x-isclass": true
        }
      },
      "required": [
        "Count"
      ],
      "example": {
        "ContinuationToken": "+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0=",
        "Count": 3,
        "Items": [
          {},
          {},
          {}
        ]
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetInventoryItemsRequest": {
      "description": "Given an entity type, entity identifier and container details, will get the entity's inventory items. ",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "ReceiptData": {
          "description": "Property bag for receipt generation",
          "type": "object"
        },
        "ShouldGenerateReceipt": {
          "description": "Whether or not to generate a receipt",
          "type": "boolean"
        }
      },
      "required": [
        "ShouldGenerateReceipt"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetInventoryItemsResult": {
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItemResponseDto"
          },
          "x-isclass": true
        },
        "Receipt": {
          "type": "string"
        },
        "Subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionItemResponseDto"
          },
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetMyReviewRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "The ID of the item to retrieve the user's review for.",
          "type": "string"
        }
      },
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetMyReviewResult": {
      "type": "object",
      "properties": {
        "Review": {
          "$ref": "#/definitions/Review",
          "description": "The review the user submitted for the requested item.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetPublishedItemRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "ID of the catalog item to retrieve from the working catalog.",
          "type": "string"
        }
      },
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetPublishedItemResult": {
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Full metadata of the catalog item requested.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Item": {}
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetReviewsRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "The ID of the item to retrieve reviews for.",
          "type": "string"
        },
        "OrderBy": {
          "description": "An OData orderBy used to order the results of the query.",
          "type": "string"
        },
        "Skip": {
          "description": "The number of review results to skip. If not specified, defaults to 0.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Top": {
          "description": "The number of review results to retrieve. If not specified, defaults to 10.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Skip",
        "Top"
      ],
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
        "OrderBy": "LowestRating",
        "Skip": 10,
        "Top": 10
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetReviewsResult": {
      "type": "object",
      "properties": {
        "ContinuationToken": {
          "description": "An opaque token used to retrieve the next page of reviews, if any are available.",
          "type": "string"
        },
        "Count": {
          "description": "The total number of reviews associated with this item.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Reviews": {
          "description": "The paginated set of results.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Review"
          },
          "x-isclass": true
        }
      },
      "required": [
        "Count"
      ],
      "example": {
        "ContinuationToken": "+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0=",
        "Count": 13,
        "Reviews": []
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetStoreByFriendlyIdRequest": {
      "description": "Get store by friendly Id request",
      "type": "object",
      "properties": {
        "ExpandReferencedItems": {
          "description": "Whether to expand the referenced items",
          "type": "boolean"
        },
        "FriendlyId": {
          "description": "The friendly Id of target store.",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the item is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "ExpandReferencedItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetStoreByIdRequest": {
      "description": "Get store by Id request",
      "type": "object",
      "properties": {
        "ExpandReferencedItems": {
          "description": "Whether to expand the referenced items",
          "type": "boolean"
        },
        "Id": {
          "description": "Id of target store",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the item is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "ExpandReferencedItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetStoreResult": {
      "description": "Get store result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "ReferencedItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItemMetadata"
          },
          "x-isclass": true
        },
        "Store": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetSubscriptionByFriendlyIdRequest": {
      "description": "Get subscription by friendly Id request",
      "type": "object",
      "properties": {
        "ExpandReferencedItems": {
          "description": "Whether to expand the referenced items",
          "type": "boolean"
        },
        "FriendlyId": {
          "description": "The friendly Id of target subscription.",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the item is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "ExpandReferencedItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetSubscriptionByIdRequest": {
      "description": "Get subscription by Id request",
      "type": "object",
      "properties": {
        "ExpandReferencedItems": {
          "description": "Whether to expand the referenced items",
          "type": "boolean"
        },
        "Id": {
          "description": "Id of target subscription",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the item is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "ExpandReferencedItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetSubscriptionByMarketplaceOfferIdRequest": {
      "description": "Get subscription by marketplace offer Id request",
      "type": "object",
      "properties": {
        "ExpandReferencedItems": {
          "description": "Whether to expand the referenced items",
          "type": "boolean"
        },
        "MarketplaceOfferId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "description": "The Marketplace offer Id of target bundle.",
          "type": "object",
          "x-isclass": true
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace the item is in.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "ExpandReferencedItems"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetSubscriptionResult": {
      "description": "Get subscription result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "ReferencedItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItemMetadata"
          },
          "x-isclass": true
        },
        "Subscription": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetUgcItemModerationStateRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "ID of the UGC item to get the moderation state for.",
          "type": "string"
        }
      },
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetUgcItemModerationStateResult": {
      "type": "object",
      "properties": {
        "State": {
          "$ref": "#/definitions/ModerationState",
          "description": "The current moderation state for the requested item.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "State": {
          "Status": "AwaitingModeration",
          "Reason": "User reports over threshold",
          "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetVirtualCurrenciesRequest": {
      "description": "Given an entity type, entity identifier and container details, will get the entity's virtual currencies. ",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GetVirtualCurrenciesResult": {
      "type": "object",
      "properties": {
        "Currencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CurrencyResponseDto"
          },
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GrantInventoryItemsRequest": {
      "description": "Given an entity type, entity identifier and container details, will grant the specified inventory items. ",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Items": {
          "description": "A list of Items to modify",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItemDetails"
          },
          "x-isclass": true
        }
      },
      "required": [
        "Items"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "GrantInventoryItemsResult": {
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItemResponseDto"
          },
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "HelpfulnessVoteRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IsHelpful": {
          "type": "boolean"
        },
        "ReviewId": {
          "description": "The ID of the review to submit a helpfulness vote for.",
          "type": "string"
        }
      },
      "required": [
        "IsHelpful"
      ],
      "example": {
        "ReviewId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
        "IsHelpful": true
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "HelpfulnessVoteResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "Image": {
      "type": "object",
      "properties": {
        "Id": {
          "type": "string"
        },
        "Locales": {
          "description": "The optional list of locales that are supported by this image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Tag": {
          "description": "The client-defined tag associated with this image.",
          "type": "string"
        },
        "Type": {
          "description": "The client-defined type of this image.",
          "type": "string"
        },
        "Url": {
          "description": "The URL for retrieval of the image.",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "InventoryItemDetails": {
      "type": "object",
      "properties": {
        "AlternateId": {
          "$ref": "#/definitions/CatalogAlternateId",
          "type": "object",
          "x-isclass": true
        },
        "Duration": {
          "type": "string"
        },
        "ExpirationDate": {
          "type": "string"
        },
        "InstanceId": {
          "type": "string"
        },
        "IsSubscription": {
          "type": "boolean"
        },
        "ItemId": {
          "type": "string"
        },
        "Marketplace": {
          "type": "string"
        },
        "MergeProperties": {
          "type": "boolean"
        },
        "Origin": {
          "type": "string"
        },
        "OriginId": {
          "type": "string"
        },
        "Properties": {
          "type": "object"
        },
        "Quantity": {
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Quantity",
        "IsSubscription"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "InventoryItemResponseDto": {
      "type": "object",
      "properties": {
        "Amount": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "ChangedAmount": {
          "type": "number",
          "x-actualtype": "int32"
        },
        "InstanceId": {
          "type": "string"
        },
        "ItemId": {
          "type": "string"
        },
        "Properties": {
          "type": "object"
        },
        "Receipt": {
          "type": "string"
        }
      },
      "required": [
        "Amount"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ModerationState": {
      "type": "object",
      "properties": {
        "LastModifiedDate": {
          "description": "The date and time this moderation state was last updated.",
          "type": "string"
        },
        "Reason": {
          "description": "The current stated reason for the associated item being moderated.",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/ModerationStatus",
          "description": "The current moderation status for the associated item.",
          "type": "string",
          "x-isenum": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ModerationStatus": {
      "type": "object",
      "enum": [
        "Unknown",
        "AwaitingModeration",
        "Approved",
        "Rejected"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PayoutInfo": {
      "type": "object",
      "properties": {
        "AccountSellerId": {
          "description": "The Dev Center account ID of the payee.",
          "type": "string"
        },
        "TaxCode": {
          "description": "The tax code for payout calculations.",
          "type": "string"
        },
        "Uaid": {
          "description": "The Universal account ID of the payee.",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PublishItemRequest": {
      "description": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ETag": {
          "description": "ETag of the catalog item to published from the working catalog to the public catalog. Used for optimistic concurrency. If the provided ETag does not match the ETag in the current working catalog, the request will be reject. If not provided, the current version of the document in the working catalog will be published.",
          "type": "string"
        },
        "ItemId": {
          "description": "ID of the catalog item to publish from the working catalog to the public catalog.",
          "type": "string"
        }
      },
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
        "ETag": "someOpaqueString"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PublishItemResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PublishResult": {
      "type": "object",
      "enum": [
        "Unknown",
        "Pending",
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PublishStatusRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "ID of the catalog item to publish from the working catalog to the public catalog.",
          "type": "string"
        }
      },
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PublishStatusResult": {
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/PublishResult",
          "description": "High level state of the publish.",
          "type": "string",
          "x-isenum": true
        },
        "StatusMessage": {
          "description": "Descriptive message about the current status of the publish.",
          "type": "string"
        }
      },
      "example": {
        "Result": "Pending",
        "StatusMessage": "scanning images"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PurchaseItemByFriendlyIdRequest": {
      "description": "Purchase item by friendly Id request",
      "type": "object",
      "properties": {
        "AutoConsume": {
          "description": "Sets a value indicating whether the purchased item should be automatically consumed. The specified item quantity will be both increased and decreased.",
          "type": "boolean"
        },
        "Currencies": {
          "description": "The currencies used to pay for item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchaseItemCurrency"
          },
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "ItemFriendlyId": {
          "description": "Friendly identifier of the item to purchase.",
          "type": "string"
        },
        "Properties": {
          "description": "Additional properties to be associated with purchased item.",
          "type": "object"
        },
        "Quantity": {
          "description": "The quantity of the item to purchase.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "ReturnInventory": {
          "description": "Indicates if the full inventory should be returned.",
          "type": "boolean"
        },
        "Store": {
          "$ref": "#/definitions/PurchaseStoreInfo",
          "description": "The store to buy the item through.",
          "type": "object",
          "x-isclass": true
        },
        "Uaid": {
          "description": "The Universal account ID for the creator of the item.",
          "type": "string"
        }
      },
      "required": [
        "ItemFriendlyId",
        "Quantity",
        "AutoConsume",
        "ReturnInventory"
      ],
      "example": {
        "ItemFriendlyId": "Example Item",
        "Entity": {
          "Id": "AAAAAAAAAAAAAAAA",
          "Type": "title_player_account",
          "TypeString": "title_player_account"
        },
        "ContainerId": "default",
        "Quantity": 99,
        "Currencies": [
          {
            "CurrencyId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
            "ExpectedPrice": 99
          }
        ],
        "Store": {
          "Id": "ffffffff-ffff-ffff-ffff-ffffffffffff"
        },
        "Properties": {
          "AKey": "AValue",
          "BKey": "BValue"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PurchaseItemByIdRequest": {
      "description": "Purchase item by Id request",
      "type": "object",
      "properties": {
        "AutoConsume": {
          "description": "Sets a value indicating whether the purchased item should be automatically consumed. The specified item quantity will be both increased and decreased.",
          "type": "boolean"
        },
        "Currencies": {
          "description": "The currencies used to pay for item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchaseItemCurrency"
          },
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "ItemId": {
          "description": "Unique identifier of the item to purchase.",
          "type": "string"
        },
        "Properties": {
          "description": "Additional properties to be associated with purchased item.",
          "type": "object"
        },
        "Quantity": {
          "description": "The quantity of the item to purchase.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "ReturnInventory": {
          "description": "Indicates if the full inventory should be returned.",
          "type": "boolean"
        },
        "Store": {
          "$ref": "#/definitions/PurchaseStoreInfo",
          "description": "The store to buy the item through.",
          "type": "object",
          "x-isclass": true
        },
        "Uaid": {
          "description": "The Universal account ID for the creator of the item.",
          "type": "string"
        }
      },
      "required": [
        "ItemId",
        "Quantity",
        "AutoConsume",
        "ReturnInventory"
      ],
      "example": {
        "ItemId": "eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee",
        "Entity": {
          "Id": "AAAAAAAAAAAAAAAA",
          "Type": "title_player_account",
          "TypeString": "title_player_account"
        },
        "ContainerId": "default",
        "Quantity": 99,
        "Currencies": [
          {
            "CurrencyId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
            "ExpectedPrice": 99
          }
        ],
        "Store": {
          "Id": "ffffffff-ffff-ffff-ffff-ffffffffffff"
        },
        "Properties": {
          "AKey": "AValue",
          "BKey": "BValue"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PurchaseItemCurrency": {
      "type": "object",
      "properties": {
        "CurrencyId": {
          "description": "The unique identifier of the currency.",
          "type": "string"
        },
        "ExpectedPrice": {
          "description": "Price the client expects to pay for the item.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "CurrencyId",
        "ExpectedPrice"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PurchaseItemResult": {
      "description": "Purchase item result",
      "type": "object",
      "properties": {
        "Currencies": {
          "description": "Details of the currencies used to purchase the items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchaseItemResultCurrency"
          },
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "InventoryItems": {
          "description": "Details of the current inventory items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchaseItemResultItem"
          },
          "x-isclass": true
        },
        "InventoryTooLarge": {
          "description": "Indicates whether the number of inventory items is too large to be returned.",
          "type": "boolean"
        },
        "PurchasedItems": {
          "description": "Details for the items purchased.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchaseItemResultItem"
          },
          "x-isclass": true
        }
      },
      "required": [
        "InventoryTooLarge"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PurchaseItemResultCurrency": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The total amount of the currency on inventory.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "ChangedAmount": {
          "description": "The amount of the currency used in this call.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "CurrencyId": {
          "description": "The ID of the currency used in this purchase.",
          "type": "string"
        }
      },
      "required": [
        "Amount",
        "ChangedAmount"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PurchaseItemResultItem": {
      "type": "object",
      "properties": {
        "Amount": {
          "description": "The total amount of the item on inventory.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "ChangedAmount": {
          "description": "The amount of the item purchased in this call.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "FriendlyId": {
          "description": "Friendly id of the item.",
          "type": "string"
        },
        "InstanceId": {
          "description": "Unique item identifier for this specific instance of the item.",
          "type": "string"
        },
        "ItemId": {
          "description": "Unique identifier of the item.",
          "type": "string"
        },
        "ItemType": {
          "description": "The type of item.",
          "type": "string"
        },
        "Properties": {
          "description": "The properties associated to the currency.",
          "type": "object"
        }
      },
      "required": [
        "Amount"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "PurchaseStoreInfo": {
      "type": "object",
      "properties": {
        "FriendlyId": {
          "description": "The friendly identifier of the store.",
          "type": "string"
        },
        "Id": {
          "description": "The unique identifier of the store.",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "Rating": {
      "type": "object",
      "properties": {
        "Average": {
          "description": "The average rating for this item",
          "type": "number",
          "x-actualtype": "float"
        },
        "Count1Star": {
          "description": "The total count of 1 star ratings for this item",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Count2Star": {
          "description": "The total count of 2 star ratings for this item",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Count3Star": {
          "description": "The total count of 3 star ratings for this item",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Count4Star": {
          "description": "The total count of 4 star ratings for this item",
          "type": "number",
          "x-actualtype": "int32"
        },
        "Count5Star": {
          "description": "The total count of 5 star ratings for this item",
          "type": "number",
          "x-actualtype": "int32"
        },
        "TotalCount": {
          "description": "The total count of ratings for this item",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ReportItemRequest": {
      "type": "object",
      "properties": {
        "Concern": {
          "$ref": "#/definitions/ConcernCategory",
          "description": "Category of concern for this report.",
          "type": "string",
          "x-isenum": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "ID of the item to report.",
          "type": "string"
        },
        "Reason": {
          "description": "The string reason for this report.",
          "type": "string"
        }
      },
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
        "Concern": "Profanity",
        "Reason": "There was swearing in the description."
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ReportItemResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ReportReviewRequest": {
      "description": "Submit a report for an inappropriate review, allowing the submitting user to specify their concern.",
      "type": "object",
      "properties": {
        "ConcernCategory": {
          "$ref": "#/definitions/ConcernCategory",
          "description": "The reason this review is being reported.",
          "type": "string",
          "x-isenum": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ReviewId": {
          "description": "The ID of the review to submit a report for.",
          "type": "string"
        }
      },
      "example": {
        "ReviewId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
        "ConcernCategory": "OffensiveContent"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ReportReviewResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "Review": {
      "type": "object",
      "properties": {
        "HelpfulNegative": {
          "description": "The number of negative helpfulness votes for this review.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "HelpfulnessVotes": {
          "description": "Total number of helpfulness votes for this review.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "HelpfulPositive": {
          "description": "The number of positive helpfulness votes for this review.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "IsInstalled": {
          "description": "Indicates whether the review author has the item installed.",
          "type": "boolean"
        },
        "ItemId": {
          "description": "The ID of the item being reviewed.",
          "type": "string"
        },
        "ItemVersion": {
          "description": "The version of the item being reviewed.",
          "type": "string"
        },
        "Locale": {
          "description": "The locale for which this review was submitted in.",
          "type": "string"
        },
        "Rating": {
          "description": "Star rating associated with this review.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "ReviewerId": {
          "description": "The ID of the author of the review.",
          "type": "string"
        },
        "ReviewId": {
          "description": "The ID of the review.",
          "type": "string"
        },
        "ReviewText": {
          "description": "The full text of this review.",
          "type": "string"
        },
        "Submitted": {
          "description": "The date and time this review was last submitted.",
          "type": "string"
        },
        "Title": {
          "description": "The title of this review.",
          "type": "string"
        }
      },
      "required": [
        "Rating",
        "IsInstalled",
        "HelpfulnessVotes",
        "HelpfulPositive",
        "HelpfulNegative",
        "Submitted"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ReviewSubmission": {
      "type": "object",
      "properties": {
        "IsInstalled": {
          "description": "Indicates whether the review author has the item installed.",
          "type": "boolean"
        },
        "ItemVersion": {
          "description": "The version of the item being reviewed.",
          "type": "string"
        },
        "Rating": {
          "description": "Star rating associated with this review.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "ReviewText": {
          "description": "The full text of this review.",
          "type": "string"
        },
        "Title": {
          "description": "The title of this review.",
          "type": "string"
        }
      },
      "required": [
        "Rating",
        "IsInstalled"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ReviewSummaryRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "The ID of the item to retrieve the reviews summary for.",
          "type": "string"
        }
      },
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ReviewSummaryResult": {
      "type": "object",
      "properties": {
        "LeastFavorableReview": {
          "$ref": "#/definitions/Review",
          "type": "object",
          "x-isclass": true
        },
        "MostFavorableReview": {
          "$ref": "#/definitions/Review",
          "type": "object",
          "x-isclass": true
        },
        "Rating": {
          "$ref": "#/definitions/Rating",
          "description": "The summary of ratings associated with this item.",
          "type": "object",
          "x-isclass": true
        },
        "ReviewsCount": {
          "description": "The total number of reviews associated with this item.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "ReviewsCount"
      ],
      "example": {
        "Rating": {
          "Average": 3.6,
          "TotalCount": 8,
          "Count5Star": 1,
          "Count4Star": 4,
          "Count3Star": 2,
          "Count2Star": 1,
          "Count1Star": 0
        },
        "ReviewsCount": 8,
        "MostFavorableReview": {
          "ReviewId": "00000000-0000-0000-0000-000000000004",
          "ItemId": "00000000-0000-0000-0000-000000000005",
          "ReviewerId": "title_player_account!ABCD1234",
          "ItemVersion": "2.1.4",
          "Title": "Best game ever",
          "ReviewText": "I play this game every day. It's so much fun!",
          "Rating": 5,
          "IsInstalled": true,
          "Locale": "en-us",
          "HelpfulnessVotes": 17,
          "HelpfulPositive": 16,
          "HelpfulNegative": 1,
          "Submitted": "2018-08-17T22:32:10.4729879+00:00"
        },
        "LeastFavorableReview": {
          "ReviewId": "00000000-0000-0000-0000-000000000006",
          "ItemId": "00000000-0000-0000-0000-000000000005",
          "ReviewerId": "title_player_account!EFGH5678",
          "ItemVersion": "2.1.2",
          "Title": "It's a game",
          "ReviewText": "",
          "Rating": 2,
          "IsInstalled": true,
          "Locale": "en-us",
          "HelpfulnessVotes": 10,
          "HelpfulNegative": 10,
          "Submitted": "2018-08-17T22:32:10.4729879+00:00"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "ReviewTakedown": {
      "type": "object",
      "properties": {
        "ItemId": {
          "description": "The ID of the item associated with the review to take down.",
          "type": "string"
        },
        "ReviewId": {
          "description": "The ID of the review to take down.",
          "type": "string"
        }
      },
      "example": {
        "ItemId": "00000000-0000-0000-0000-000000000003",
        "ReviewId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchBundlesRequest": {
      "description": "Search for bundles request",
      "type": "object",
      "properties": {
        "ExpandReferencedItems": {
          "description": "Whether the referenced items should be expanded.",
          "type": "boolean"
        },
        "Filter": {
          "description": "An OData filter used to refine the search query.",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "OrderBy": {
          "description": "An OData orderBy used to order the results of the search query.",
          "type": "string"
        },
        "Search": {
          "description": "The text to search for",
          "type": "string"
        },
        "Skip": {
          "description": "The number of search results to skip.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace to search under.",
          "type": "object",
          "x-isclass": true
        },
        "Top": {
          "description": "The number of search results to retrieve.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "ExpandReferencedItems",
        "Skip",
        "Top"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchBundlesResult": {
      "description": "Search for bundles result",
      "type": "object",
      "properties": {
        "Bundles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetBundleResult"
          },
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchForItemsContainingItemByFriendlyIdRequest": {
      "description": "Search for bundles/subscriptions/stores containing any item from a list of items. The items are referenced by Friendly Ids.",
      "type": "object",
      "properties": {
        "ContainerType": {
          "$ref": "#/definitions/ContainerType",
          "description": "Do we want to restrict the Search to Bundles/Subscriptions/Stores?",
          "type": "string",
          "x-isenum": true
        },
        "FriendlyIds": {
          "description": "FriendlyIds of the items",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace to search under.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "FriendlyIds"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchForItemsContainingItemByIdRequest": {
      "description": "Search for bundles/subscriptions/stores containing any item from a list of items. The items are referenced by Ids.",
      "type": "object",
      "properties": {
        "ContainerType": {
          "$ref": "#/definitions/ContainerType",
          "description": "Do we want to restrict the Search to Bundles/Subscriptions/Stores?",
          "type": "string",
          "x-isenum": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Ids": {
          "description": "Ids of the items",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace to search under.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Ids"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchForItemsContainingItemResult": {
      "description": "Search for items containing an item result",
      "type": "object",
      "properties": {
        "Bundles": {
          "description": "List of Bundles containing the item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItemMetadata"
          },
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Stores": {
          "description": "List of Stores containing the item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItemMetadata"
          },
          "x-isclass": true
        },
        "Subscriptions": {
          "description": "List of Subscriptions containing the item.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItemMetadata"
          },
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchInStoreByFriendlyIdRequest": {
      "description": "Search for items within a store request. The store is referenced by Friendly Id.",
      "type": "object",
      "properties": {
        "Filter": {
          "description": "An OData filter used to refine the search query.",
          "type": "string"
        },
        "FriendlyId": {
          "description": "FriendlyId of target store",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "OrderBy": {
          "description": "An OData orderBy used to order the results of the search query.",
          "type": "string"
        },
        "Search": {
          "description": "The text to search for",
          "type": "string"
        },
        "Skip": {
          "description": "The number of search results to skip.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace to search under.",
          "type": "object",
          "x-isclass": true
        },
        "Top": {
          "description": "The number of search results to retrieve.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "FriendlyId",
        "Skip",
        "Top"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchInStoreByIdRequest": {
      "description": "Search for items within a store request. The store is referenced by Id.",
      "type": "object",
      "properties": {
        "Filter": {
          "description": "An OData filter used to refine the search query.",
          "type": "string"
        },
        "Id": {
          "description": "Id of target store",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "OrderBy": {
          "description": "An OData orderBy used to order the results of the search query.",
          "type": "string"
        },
        "Search": {
          "description": "The text to search for",
          "type": "string"
        },
        "Skip": {
          "description": "The number of search results to skip.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace to search under.",
          "type": "object",
          "x-isclass": true
        },
        "Top": {
          "description": "The number of search results to retrieve.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "Id",
        "Skip",
        "Top"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchInStoreResult": {
      "description": "Search within a store result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Items": {
          "description": "List of Items within the Store that satisfy the search condition.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogItemMetadata"
          },
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchStoresRequest": {
      "description": "Search for stores request",
      "type": "object",
      "properties": {
        "ExpandReferencedItems": {
          "description": "Whether the referenced items should be expanded.",
          "type": "boolean"
        },
        "Filter": {
          "description": "An OData filter used to refine the search query.",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "OrderBy": {
          "description": "An OData orderBy used to order the results of the search query.",
          "type": "string"
        },
        "Search": {
          "description": "The text to search for",
          "type": "string"
        },
        "Skip": {
          "description": "The number of search results to skip.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace to search under.",
          "type": "object",
          "x-isclass": true
        },
        "Top": {
          "description": "The number of search results to retrieve.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "ExpandReferencedItems",
        "Skip",
        "Top"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchStoresResult": {
      "description": "Search for stores result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Stores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetStoreResult"
          },
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchSubscriptionsRequest": {
      "description": "Search for subscriptions request",
      "type": "object",
      "properties": {
        "ExpandReferencedItems": {
          "description": "Whether the referenced items should be expanded.",
          "type": "boolean"
        },
        "Filter": {
          "description": "An OData filter used to refine the search query.",
          "type": "string"
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "OrderBy": {
          "description": "An OData orderBy used to order the results of the search query.",
          "type": "string"
        },
        "Search": {
          "description": "The text to search for",
          "type": "string"
        },
        "Skip": {
          "description": "The number of search results to skip.",
          "type": "number",
          "x-actualtype": "int32"
        },
        "SourceEntityKey": {
          "$ref": "#/definitions/EntityKey",
          "description": "The title or namespace to search under.",
          "type": "object",
          "x-isclass": true
        },
        "Top": {
          "description": "The number of search results to retrieve.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "ExpandReferencedItems",
        "Skip",
        "Top"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SearchSubscriptionsResult": {
      "description": "Search for subscriptions result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetSubscriptionResult"
          },
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SetInventoryItemsRequest": {
      "description": "Given an entity type, entity identifier and container details, will set the entity's inventory items",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Items": {
          "description": "A list of Items to modify",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItemDetails"
          },
          "x-isclass": true
        }
      },
      "required": [
        "Items"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SetInventoryItemsResult": {
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItemResponseDto"
          },
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SetUgcItemModerationStateRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "ItemId": {
          "description": "ID of the UGC item to set the moderation state for.",
          "type": "string"
        },
        "Reason": {
          "description": "The reason for the moderation state change for the associated UGC item.",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/ModerationStatus",
          "description": "The status to set for the associated UGC item.",
          "type": "string",
          "x-isenum": true
        }
      },
      "example": {
        "ItemId": "dddddddd-dddd-dddd-dddd-dddddddddddd",
        "Status": "AwaitingModeration",
        "Reason": "User reports over threshold"
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SetUgcItemModerationStateResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SetVirtualCurrenciesRequest": {
      "description": "Given an entity type, entity identifier and container details, will set the entity's currencies to a specific amount. ",
      "type": "object",
      "properties": {
        "Currencies": {
          "description": "A list of currencies to modify",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CurrencyDetails"
          },
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "required": [
        "Currencies"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SetVirtualCurrenciesResult": {
      "type": "object",
      "properties": {
        "Currencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CurrencyResponseDto"
          },
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SubscriptionDetails": {
      "type": "object",
      "properties": {
        "DurationInSeconds": {
          "description": "The length of time that the subscription will last.",
          "type": "number",
          "x-actualtype": "double"
        }
      },
      "required": [
        "DurationInSeconds"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SubscriptionItemResponseDto": {
      "type": "object",
      "properties": {
        "ExpirationDate": {
          "type": "string"
        },
        "ItemIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Marketplace": {
          "type": "string"
        },
        "OfferId": {
          "type": "string"
        },
        "Receipt": {
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SubtractVirtualCurrenciesRequest": {
      "description": "Given an entity type, entity identifier and container details, will decrease the entity's currencies by a specific amount. ",
      "type": "object",
      "properties": {
        "Currencies": {
          "description": "A list of currencies to modify",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CurrencyDetails"
          },
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "required": [
        "Currencies"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "SubtractVirtualCurrenciesResult": {
      "type": "object",
      "properties": {
        "Currencies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CurrencyResponseDto"
          },
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "TakedownReviewsRequest": {
      "description": "Submit a request to takedown one or more reviews, removing them from public view. Authors will still be able to see their reviews after being taken down.",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Reviews": {
          "description": "The set of reviews to take down.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReviewTakedown"
          },
          "x-isclass": true
        }
      },
      "example": {
        "Reviews": [
          {
            "ItemId": "00000000-0000-0000-0000-000000000003",
            "ReviewId": "dddddddd-dddd-dddd-dddd-dddddddddddd"
          }
        ]
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "TakedownReviewsResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateBundleRequest": {
      "description": "Update bundle request",
      "type": "object",
      "properties": {
        "Bundle": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Bundle details",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "required": [
        "Bundle"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateBundleResult": {
      "description": "Update bundle result",
      "type": "object",
      "properties": {
        "Bundle": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateCatalogConfigRequest": {
      "type": "object",
      "properties": {
        "Config": {
          "$ref": "#/definitions/CatalogConfig",
          "type": "object",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Config": {
          "Admins": [
            "title_player_account!ABC123"
          ],
          "Catalog": {
            "ContentTypes": [
              "map",
              "skin"
            ],
            "Tags": [
              "sword",
              "shield"
            ]
          },
          "DeepLinkFormats": [
            {
              "Platform": "iOS",
              "Format": "mygame://item/{id}"
            }
          ],
          "DisplayPropertyIndexInfos": [
            {
              "Name": "damage",
              "Type": "QueryDouble"
            }
          ],
          "Reviewers": [
            "title_player_account!ABC123"
          ],
          "UserGeneratedContent": {
            "ContentTypes": [
              "skin"
            ],
            "Tags": [
              "sword",
              "shield"
            ]
          }
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateCatalogConfigResult": {
      "type": "object",
      "properties": {},
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateCurrencyRequest": {
      "type": "object",
      "properties": {
        "Currency": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Updated metadata describing the currency item to be updated.",
          "type": "object",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Currency"
      ],
      "example": {
        "Currency": {
          "Id": "00000000-0000-0000-0000-000000000004",
          "AlternateIds": [
            {
              "Type": "FriendlyId",
              "Value": "AU"
            }
          ],
          "Title": {
            "neutral": "gold",
            "es-MX": "el oro"
          },
          "IsHidden": false,
          "StartDate": "2018-08-17T22:32:10.4729879+00:00",
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Tag": "display",
              "Type": "thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/gold_thumb.jpg"
            }
          ],
          "ETag": "opaqueString"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateCurrencyResult": {
      "type": "object",
      "properties": {
        "Currency": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Updated metadata describing the currency item just updated.",
          "type": "object",
          "x-isclass": true
        },
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Currency": {
          "Id": "00000000-0000-0000-0000-000000000004",
          "AlternateIds": [
            {
              "Type": "FriendlyId",
              "Value": "AU"
            }
          ],
          "Title": {
            "neutral": "gold",
            "es-MX": "el oro"
          },
          "IsHidden": false,
          "StartDate": "2018-08-17T22:32:10.4729879+00:00",
          "Images": [
            {
              "Id": "00000000-0000-0000-0000-000000000003",
              "Tag": "display",
              "Type": "thumbnail",
              "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/gold_thumb.jpg"
            }
          ],
          "ETag": "opaqueString"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateDraftItemRequest": {
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "Item": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Updated metadata describing the catalog item to be updated.",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Item"
      ],
      "example": {},
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateDraftItemResult": {
      "type": "object",
      "properties": {
        "Item": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Updated metadata describing the catalog item just updated.",
          "type": "object",
          "x-isclass": true
        }
      },
      "example": {
        "Item": {}
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateInventoryItemsPropertiesRequest": {
      "description": "Update the specified inventory items.",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Items": {
          "description": "A list of Items to modify",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItemDetails"
          },
          "x-isclass": true
        }
      },
      "required": [
        "Items"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateInventoryPropertiesItemsResult": {
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryItemResponseDto"
          },
          "x-isclass": true
        },
        "Subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionItemResponseDto"
          },
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateStoreRequest": {
      "description": "Update store request",
      "type": "object",
      "properties": {
        "Entity": {
          "$ref": "#/definitions/EntityKey",
          "description": "The entity to perform this action on.",
          "type": "object",
          "x-isclass": true
        },
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Store": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "Bundle details",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Store"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateStoreResult": {
      "description": "Update store result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Store": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateSubscriptionRequest": {
      "description": "Update subscription request",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Subscription": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "description": "subscription details",
          "type": "object",
          "x-isclass": true
        }
      },
      "required": [
        "Subscription"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UpdateSubscriptionResult": {
      "description": "Update subscription result",
      "type": "object",
      "properties": {
        "IdempotencyId": {
          "description": "The Idempotency Id for this request",
          "type": "string"
        },
        "Subscription": {
          "$ref": "#/definitions/CatalogItemMetadata",
          "type": "object",
          "x-isclass": true
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UploadInfo": {
      "type": "object",
      "properties": {
        "FileName": {
          "description": "Name of the file to be uploaded.",
          "type": "string"
        },
        "FileSize": {
          "description": "Size of the file to be uploaded, in bytes.",
          "type": "number",
          "x-actualtype": "int32"
        }
      },
      "required": [
        "FileSize"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UploadUrlMetadata": {
      "type": "object",
      "properties": {
        "FileName": {
          "description": "Name of the file for which this upload url was requested.",
          "type": "string"
        },
        "Id": {
          "description": "Unique identifier for the binary content to be uploaded to the target url.",
          "type": "string"
        },
        "Url": {
          "description": "Url for the binary content to be uploaded to.",
          "type": "string"
        }
      },
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    },
    "UserGeneratedContentSpecificConfig": {
      "type": "object",
      "properties": {
        "ContentTypes": {
          "description": "The set of content types that will be used for validation and if no values are provided then anything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Enabled": {
          "description": "Flag defining whether user generated content is enabled.",
          "type": "boolean"
        },
        "Tags": {
          "description": "The set of tags that will be used for validation and if no values are provided then anything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "Enabled"
      ],
      "x-AnyInclusiveFlags": [
        "Beta"
      ]
    }
  },
  "parameters": {
    "AddVirtualCurrenciesRequest": {
      "name": "AddVirtualCurrenciesRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will increase the entity's currencies by a specific amount. ",
      "schema": {
        "$ref": "#/definitions/AddVirtualCurrenciesRequest"
      }
    },
    "CatalogSearchRequest": {
      "name": "CatalogSearchRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/CatalogSearchRequest"
      }
    },
    "ConsumeInventoryItemsRequest": {
      "name": "ConsumeInventoryItemsRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will consume the specified inventory items. ",
      "schema": {
        "$ref": "#/definitions/ConsumeInventoryItemsRequest"
      }
    },
    "CreateBundleRequest": {
      "name": "CreateBundleRequest",
      "in": "body",
      "description": "Create bundle request",
      "schema": {
        "$ref": "#/definitions/CreateBundleRequest"
      }
    },
    "CreateCurrencyRequest": {
      "name": "CreateCurrencyRequest",
      "in": "body",
      "description": "Given an entity type, and currency details, create a currency.",
      "schema": {
        "$ref": "#/definitions/CreateCurrencyRequest"
      }
    },
    "CreateDraftItemRequest": {
      "name": "CreateDraftItemRequest",
      "in": "body",
      "description": "The item will not be published to the public catalog until the user makes a call to the PublishItem API.",
      "schema": {
        "$ref": "#/definitions/CreateDraftItemRequest"
      }
    },
    "CreateOrUpdateReviewRequest": {
      "name": "CreateOrUpdateReviewRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/CreateOrUpdateReviewRequest"
      }
    },
    "CreateStoreRequest": {
      "name": "CreateStoreRequest",
      "in": "body",
      "description": "Create store request",
      "schema": {
        "$ref": "#/definitions/CreateStoreRequest"
      }
    },
    "CreateSubscriptionRequest": {
      "name": "CreateSubscriptionRequest",
      "in": "body",
      "description": "Create subscription request",
      "schema": {
        "$ref": "#/definitions/CreateSubscriptionRequest"
      }
    },
    "CreateUploadUrlsRequest": {
      "name": "CreateUploadUrlsRequest",
      "in": "body",
      "description": "Upload URLs point to Azure Blobs; clients must follow the Microsoft Azure Storage Blob Service REST API pattern for uploading content. The response contains upload URLs and IDs for each file. The IDs and URLs returned must be added to the item metadata and commited using the CreateDraftItem or UpdateDraftItem Item APIs.",
      "schema": {
        "$ref": "#/definitions/CreateUploadUrlsRequest"
      }
    },
    "DeleteBundleByFriendlyIdRequest": {
      "name": "DeleteBundleByFriendlyIdRequest",
      "in": "body",
      "description": "Delete bundle by friendly Id request",
      "schema": {
        "$ref": "#/definitions/DeleteBundleByFriendlyIdRequest"
      }
    },
    "DeleteBundleByIdRequest": {
      "name": "DeleteBundleByIdRequest",
      "in": "body",
      "description": "Delete bundle by Id request",
      "schema": {
        "$ref": "#/definitions/DeleteBundleByIdRequest"
      }
    },
    "DeleteItemRequest": {
      "name": "DeleteItemRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/DeleteItemRequest"
      }
    },
    "DeleteStoreByFriendlyIdRequest": {
      "name": "DeleteStoreByFriendlyIdRequest",
      "in": "body",
      "description": "Delete store by Friendly Id request",
      "schema": {
        "$ref": "#/definitions/DeleteStoreByFriendlyIdRequest"
      }
    },
    "DeleteStoreByIdRequest": {
      "name": "DeleteStoreByIdRequest",
      "in": "body",
      "description": "Delete store by Id request",
      "schema": {
        "$ref": "#/definitions/DeleteStoreByIdRequest"
      }
    },
    "DeleteSubscriptionByFriendlyIdRequest": {
      "name": "DeleteSubscriptionByFriendlyIdRequest",
      "in": "body",
      "description": "Delete Subscription by friendly Id request",
      "schema": {
        "$ref": "#/definitions/DeleteSubscriptionByFriendlyIdRequest"
      }
    },
    "DeleteSubscriptionByIdRequest": {
      "name": "DeleteSubscriptionByIdRequest",
      "in": "body",
      "description": "Delete subscription by Id request",
      "schema": {
        "$ref": "#/definitions/DeleteSubscriptionByIdRequest"
      }
    },
    "GetBundleByFriendlyIdRequest": {
      "name": "GetBundleByFriendlyIdRequest",
      "in": "body",
      "description": "Get bundle by friendly Id request",
      "schema": {
        "$ref": "#/definitions/GetBundleByFriendlyIdRequest"
      }
    },
    "GetBundleByIdRequest": {
      "name": "GetBundleByIdRequest",
      "in": "body",
      "description": "Get bundle by Id request",
      "schema": {
        "$ref": "#/definitions/GetBundleByIdRequest"
      }
    },
    "GetBundleByMarketplaceOfferIdRequest": {
      "name": "GetBundleByMarketplaceOfferIdRequest",
      "in": "body",
      "description": "Get bundle by marketplace offer Id request",
      "schema": {
        "$ref": "#/definitions/GetBundleByMarketplaceOfferIdRequest"
      }
    },
    "GetCatalogConfigRequest": {
      "name": "GetCatalogConfigRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetCatalogConfigRequest"
      }
    },
    "GetCurrencyByIdRequest": {
      "name": "GetCurrencyByIdRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetCurrencyByIdRequest"
      }
    },
    "GetDraftItemRequest": {
      "name": "GetDraftItemRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetDraftItemRequest"
      }
    },
    "GetDraftItemsRequest": {
      "name": "GetDraftItemsRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetDraftItemsRequest"
      }
    },
    "GetInventoryItemsRequest": {
      "name": "GetInventoryItemsRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will get the entity's inventory items. ",
      "schema": {
        "$ref": "#/definitions/GetInventoryItemsRequest"
      }
    },
    "GetMyReviewRequest": {
      "name": "GetMyReviewRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetMyReviewRequest"
      }
    },
    "GetPublishedItemRequest": {
      "name": "GetPublishedItemRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetPublishedItemRequest"
      }
    },
    "GetReviewsRequest": {
      "name": "GetReviewsRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetReviewsRequest"
      }
    },
    "GetStoreByFriendlyIdRequest": {
      "name": "GetStoreByFriendlyIdRequest",
      "in": "body",
      "description": "Get store by friendly Id request",
      "schema": {
        "$ref": "#/definitions/GetStoreByFriendlyIdRequest"
      }
    },
    "GetStoreByIdRequest": {
      "name": "GetStoreByIdRequest",
      "in": "body",
      "description": "Get store by Id request",
      "schema": {
        "$ref": "#/definitions/GetStoreByIdRequest"
      }
    },
    "GetSubscriptionByFriendlyIdRequest": {
      "name": "GetSubscriptionByFriendlyIdRequest",
      "in": "body",
      "description": "Get subscription by friendly Id request",
      "schema": {
        "$ref": "#/definitions/GetSubscriptionByFriendlyIdRequest"
      }
    },
    "GetSubscriptionByIdRequest": {
      "name": "GetSubscriptionByIdRequest",
      "in": "body",
      "description": "Get subscription by Id request",
      "schema": {
        "$ref": "#/definitions/GetSubscriptionByIdRequest"
      }
    },
    "GetSubscriptionByMarketplaceOfferIdRequest": {
      "name": "GetSubscriptionByMarketplaceOfferIdRequest",
      "in": "body",
      "description": "Get subscription by marketplace offer Id request",
      "schema": {
        "$ref": "#/definitions/GetSubscriptionByMarketplaceOfferIdRequest"
      }
    },
    "GetUgcItemModerationStateRequest": {
      "name": "GetUgcItemModerationStateRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/GetUgcItemModerationStateRequest"
      }
    },
    "GetVirtualCurrenciesRequest": {
      "name": "GetVirtualCurrenciesRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will get the entity's virtual currencies. ",
      "schema": {
        "$ref": "#/definitions/GetVirtualCurrenciesRequest"
      }
    },
    "GrantInventoryItemsRequest": {
      "name": "GrantInventoryItemsRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will grant the specified inventory items. ",
      "schema": {
        "$ref": "#/definitions/GrantInventoryItemsRequest"
      }
    },
    "HelpfulnessVoteRequest": {
      "name": "HelpfulnessVoteRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/HelpfulnessVoteRequest"
      }
    },
    "PublishItemRequest": {
      "name": "PublishItemRequest",
      "in": "body",
      "description": "The call kicks off a workflow to publish the item to the public catalog. The Publish Status API should be used to monitor the publish job.",
      "schema": {
        "$ref": "#/definitions/PublishItemRequest"
      }
    },
    "PublishStatusRequest": {
      "name": "PublishStatusRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/PublishStatusRequest"
      }
    },
    "PurchaseItemByFriendlyIdRequest": {
      "name": "PurchaseItemByFriendlyIdRequest",
      "in": "body",
      "description": "Purchase item by friendly Id request",
      "schema": {
        "$ref": "#/definitions/PurchaseItemByFriendlyIdRequest"
      }
    },
    "PurchaseItemByIdRequest": {
      "name": "PurchaseItemByIdRequest",
      "in": "body",
      "description": "Purchase item by Id request",
      "schema": {
        "$ref": "#/definitions/PurchaseItemByIdRequest"
      }
    },
    "ReportItemRequest": {
      "name": "ReportItemRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ReportItemRequest"
      }
    },
    "ReportReviewRequest": {
      "name": "ReportReviewRequest",
      "in": "body",
      "description": "Submit a report for an inappropriate review, allowing the submitting user to specify their concern.",
      "schema": {
        "$ref": "#/definitions/ReportReviewRequest"
      }
    },
    "ReviewSummaryRequest": {
      "name": "ReviewSummaryRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/ReviewSummaryRequest"
      }
    },
    "SearchBundlesRequest": {
      "name": "SearchBundlesRequest",
      "in": "body",
      "description": "Search for bundles request",
      "schema": {
        "$ref": "#/definitions/SearchBundlesRequest"
      }
    },
    "SearchForItemsContainingItemByFriendlyIdRequest": {
      "name": "SearchForItemsContainingItemByFriendlyIdRequest",
      "in": "body",
      "description": "Search for bundles/subscriptions/stores containing any item from a list of items. The items are referenced by Friendly Ids.",
      "schema": {
        "$ref": "#/definitions/SearchForItemsContainingItemByFriendlyIdRequest"
      }
    },
    "SearchForItemsContainingItemByIdRequest": {
      "name": "SearchForItemsContainingItemByIdRequest",
      "in": "body",
      "description": "Search for bundles/subscriptions/stores containing any item from a list of items. The items are referenced by Ids.",
      "schema": {
        "$ref": "#/definitions/SearchForItemsContainingItemByIdRequest"
      }
    },
    "SearchInStoreByFriendlyIdRequest": {
      "name": "SearchInStoreByFriendlyIdRequest",
      "in": "body",
      "description": "Search for items within a store request. The store is referenced by Friendly Id.",
      "schema": {
        "$ref": "#/definitions/SearchInStoreByFriendlyIdRequest"
      }
    },
    "SearchInStoreByIdRequest": {
      "name": "SearchInStoreByIdRequest",
      "in": "body",
      "description": "Search for items within a store request. The store is referenced by Id.",
      "schema": {
        "$ref": "#/definitions/SearchInStoreByIdRequest"
      }
    },
    "SearchStoresRequest": {
      "name": "SearchStoresRequest",
      "in": "body",
      "description": "Search for stores request",
      "schema": {
        "$ref": "#/definitions/SearchStoresRequest"
      }
    },
    "SearchSubscriptionsRequest": {
      "name": "SearchSubscriptionsRequest",
      "in": "body",
      "description": "Search for subscriptions request",
      "schema": {
        "$ref": "#/definitions/SearchSubscriptionsRequest"
      }
    },
    "SetInventoryItemsRequest": {
      "name": "SetInventoryItemsRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will set the entity's inventory items",
      "schema": {
        "$ref": "#/definitions/SetInventoryItemsRequest"
      }
    },
    "SetUgcItemModerationStateRequest": {
      "name": "SetUgcItemModerationStateRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/SetUgcItemModerationStateRequest"
      }
    },
    "SetVirtualCurrenciesRequest": {
      "name": "SetVirtualCurrenciesRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will set the entity's currencies to a specific amount. ",
      "schema": {
        "$ref": "#/definitions/SetVirtualCurrenciesRequest"
      }
    },
    "SubtractVirtualCurrenciesRequest": {
      "name": "SubtractVirtualCurrenciesRequest",
      "in": "body",
      "description": "Given an entity type, entity identifier and container details, will decrease the entity's currencies by a specific amount. ",
      "schema": {
        "$ref": "#/definitions/SubtractVirtualCurrenciesRequest"
      }
    },
    "TakedownReviewsRequest": {
      "name": "TakedownReviewsRequest",
      "in": "body",
      "description": "Submit a request to takedown one or more reviews, removing them from public view. Authors will still be able to see their reviews after being taken down.",
      "schema": {
        "$ref": "#/definitions/TakedownReviewsRequest"
      }
    },
    "UpdateBundleRequest": {
      "name": "UpdateBundleRequest",
      "in": "body",
      "description": "Update bundle request",
      "schema": {
        "$ref": "#/definitions/UpdateBundleRequest"
      }
    },
    "UpdateCatalogConfigRequest": {
      "name": "UpdateCatalogConfigRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/UpdateCatalogConfigRequest"
      }
    },
    "UpdateCurrencyRequest": {
      "name": "UpdateCurrencyRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/UpdateCurrencyRequest"
      }
    },
    "UpdateDraftItemRequest": {
      "name": "UpdateDraftItemRequest",
      "in": "body",
      "schema": {
        "$ref": "#/definitions/UpdateDraftItemRequest"
      }
    },
    "UpdateInventoryItemsPropertiesRequest": {
      "name": "UpdateInventoryItemsPropertiesRequest",
      "in": "body",
      "description": "Update the specified inventory items.",
      "schema": {
        "$ref": "#/definitions/UpdateInventoryItemsPropertiesRequest"
      }
    },
    "UpdateStoreRequest": {
      "name": "UpdateStoreRequest",
      "in": "body",
      "description": "Update store request",
      "schema": {
        "$ref": "#/definitions/UpdateStoreRequest"
      }
    },
    "UpdateSubscriptionRequest": {
      "name": "UpdateSubscriptionRequest",
      "in": "body",
      "description": "Update subscription request",
      "schema": {
        "$ref": "#/definitions/UpdateSubscriptionRequest"
      }
    }
  },
  "responses": {
    "ApiErrorWrapper": {
      "description": "This is the outer-wrapper for all responses with errors",
      "schema": {
        "$ref": "#/definitions/ApiErrorWrapper"
      }
    },
    "AddVirtualCurrenciesResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/AddVirtualCurrenciesResult"
          }
        }
      }
    },
    "CatalogSearchResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CatalogSearchResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Count": 261,
            "Items": []
          }
        }
      }
    },
    "ConsumeInventoryItemsResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ConsumeInventoryItemsResult"
          }
        }
      }
    },
    "CreateBundleResult": {
      "description": "Create bundle result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateBundleResult"
          }
        }
      }
    },
    "CreateCurrencyResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateCurrencyResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "CurrencyMetadata": {
              "Id": "00000000-0000-0000-0000-000000000004",
              "AlternateIds": [
                {
                  "Type": "FriendlyId",
                  "Value": "AU"
                }
              ],
              "Title": {
                "neutral": "gold"
              },
              "IsHidden": false,
              "StartDate": "2018-08-17T22:32:10.4729879+00:00",
              "Images": [
                {
                  "Id": "00000000-0000-0000-0000-000000000003",
                  "Tag": "display",
                  "Type": "thumbnail",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/gold_thumb.jpg"
                }
              ],
              "ETag": "opaqueString"
            }
          }
        }
      }
    },
    "CreateDraftItemResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateDraftItemResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Item": {
              "Id": "dddddddd-dddd-dddd-dddd-dddddddddddd",
              "Title": {
                "neutral": "Neutral title",
                "en-US": "US English title"
              },
              "Description": {
                "neutral": "Neutral description",
                "en-US": "US English description"
              },
              "ContentType": "example item",
              "CreatorEntityKey": {
                "Id": "someId",
                "Type": "title_player_account",
                "TypeString": "title_player_account"
              },
              "IsHidden": false,
              "Platforms": [
                "android",
                "xboxone",
                "ios"
              ],
              "Tags": [
                "pirates",
                "holiday"
              ],
              "DisplayVersion": "1.0.0",
              "CreationDate": "2018-08-17T22:32:10.4729879+00:00",
              "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00",
              "Contents": [
                {
                  "Id": "00000000-0000-0000-0000-000000000001",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000001/textures.zip",
                  "MaxClientVersion": "2.4.1",
                  "MinClientVersion": "2.0.0",
                  "Tags": [
                    "pirate",
                    "desert"
                  ],
                  "Type": "textures"
                }
              ],
              "Images": [
                {
                  "Id": "00000000-0000-0000-0000-000000000003",
                  "Tag": "splashscreen",
                  "Type": "thumbnail",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/splashscreen_thumb.jpg"
                }
              ],
              "DisplayProperties": {
                "mapDetails": {
                  "mapType": "desertIsland",
                  "gameMode": "capture",
                  "maxPlayers": 16
                },
                "averageMatchLengthInSeconds": 947
              },
              "ETag": "opaqueString"
            }
          }
        }
      }
    },
    "CreateOrUpdateReviewResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateOrUpdateReviewResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "CreateStoreResult": {
      "description": "Create store result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateStoreResult"
          }
        }
      }
    },
    "CreateSubscriptionResult": {
      "description": "Create subscription result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateSubscriptionResult"
          }
        }
      }
    },
    "CreateUploadUrlsResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/CreateUploadUrlsResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "UploadUrls": [
              {
                "Id": "11111111-1111-1111-1111-111111111111",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/11111111-1111-1111-1111-111111111111/textures.zip",
                "FileName": "textures.zip"
              },
              {
                "Id": "22222222-2222-2222-2222-222222222222",
                "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/22222222-2222-2222-2222-222222222222/sprites.png",
                "FileName": "sprites.png"
              }
            ]
          }
        }
      }
    },
    "DeleteBundleResult": {
      "description": "Delete bundle result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/DeleteBundleResult"
          }
        }
      }
    },
    "DeleteItemResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/DeleteItemResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "DeleteStoreResult": {
      "description": "Delete store result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/DeleteStoreResult"
          }
        }
      }
    },
    "DeleteSubscriptionResult": {
      "description": "Delete subscription result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/DeleteSubscriptionResult"
          }
        }
      }
    },
    "GetBundleResult": {
      "description": "Get bundle result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetBundleResult"
          }
        }
      }
    },
    "GetCatalogConfigResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetCatalogConfigResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Config": {
              "Admins": [
                "title_player_account!ABC123"
              ],
              "Catalog": {
                "ContentTypes": [
                  "map",
                  "skin"
                ],
                "Tags": [
                  "sword",
                  "shield"
                ]
              },
              "DeepLinkFormats": [
                {
                  "Platform": "iOS",
                  "Format": "mygame://item/{id}"
                }
              ],
              "DisplayPropertyIndexInfos": [
                {
                  "Name": "damage",
                  "Type": "QueryDouble"
                }
              ],
              "Reviewers": [
                "title_player_account!ABC123"
              ],
              "UserGeneratedContent": {
                "ContentTypes": [
                  "skin"
                ],
                "Tags": [
                  "sword",
                  "shield"
                ]
              }
            }
          }
        }
      }
    },
    "GetCurrencyByIdResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetCurrencyByIdResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Currency": {}
          }
        }
      }
    },
    "GetDraftItemResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetDraftItemResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Item": {}
          }
        }
      }
    },
    "GetDraftItemsResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetDraftItemsResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "ContinuationToken": "+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0=",
            "Count": 3,
            "Items": [
              {},
              {},
              {}
            ]
          }
        }
      }
    },
    "GetInventoryItemsResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetInventoryItemsResult"
          }
        }
      }
    },
    "GetMyReviewResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetMyReviewResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "GetPublishedItemResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetPublishedItemResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Item": {}
          }
        }
      }
    },
    "GetReviewsResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetReviewsResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "ContinuationToken": "+RID:IQkbAIvkRQD9oQIAAAAAAA==#RT:1#TRC:10#FPC:AgEKHAoKAPEhAOAhQP8DWIAMAgB8rRACAJeAHAIA0r0=",
            "Count": 13,
            "Reviews": []
          }
        }
      }
    },
    "GetStoreResult": {
      "description": "Get store result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetStoreResult"
          }
        }
      }
    },
    "GetSubscriptionResult": {
      "description": "Get subscription result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetSubscriptionResult"
          }
        }
      }
    },
    "GetUgcItemModerationStateResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetUgcItemModerationStateResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "State": {
              "Status": "AwaitingModeration",
              "Reason": "User reports over threshold",
              "LastModifiedDate": "2018-08-17T22:32:31.911375+00:00"
            }
          }
        }
      }
    },
    "GetVirtualCurrenciesResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GetVirtualCurrenciesResult"
          }
        }
      }
    },
    "GrantInventoryItemsResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/GrantInventoryItemsResult"
          }
        }
      }
    },
    "HelpfulnessVoteResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/HelpfulnessVoteResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "PublishItemResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/PublishItemResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "PublishStatusResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/PublishStatusResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Result": "Pending",
            "StatusMessage": "scanning images"
          }
        }
      }
    },
    "PurchaseItemResult": {
      "description": "Purchase item result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/PurchaseItemResult"
          }
        }
      }
    },
    "ReportItemResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ReportItemResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "ReportReviewResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ReportReviewResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "ReviewSummaryResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/ReviewSummaryResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Rating": {
              "Average": 3.6,
              "TotalCount": 8,
              "Count5Star": 1,
              "Count4Star": 4,
              "Count3Star": 2,
              "Count2Star": 1,
              "Count1Star": 0
            },
            "ReviewsCount": 8,
            "MostFavorableReview": {
              "ReviewId": "00000000-0000-0000-0000-000000000004",
              "ItemId": "00000000-0000-0000-0000-000000000005",
              "ReviewerId": "title_player_account!ABCD1234",
              "ItemVersion": "2.1.4",
              "Title": "Best game ever",
              "ReviewText": "I play this game every day. It's so much fun!",
              "Rating": 5,
              "IsInstalled": true,
              "Locale": "en-us",
              "HelpfulnessVotes": 17,
              "HelpfulPositive": 16,
              "HelpfulNegative": 1,
              "Submitted": "2018-08-17T22:32:10.4729879+00:00"
            },
            "LeastFavorableReview": {
              "ReviewId": "00000000-0000-0000-0000-000000000006",
              "ItemId": "00000000-0000-0000-0000-000000000005",
              "ReviewerId": "title_player_account!EFGH5678",
              "ItemVersion": "2.1.2",
              "Title": "It's a game",
              "ReviewText": "",
              "Rating": 2,
              "IsInstalled": true,
              "Locale": "en-us",
              "HelpfulnessVotes": 10,
              "HelpfulNegative": 10,
              "Submitted": "2018-08-17T22:32:10.4729879+00:00"
            }
          }
        }
      }
    },
    "SearchBundlesResult": {
      "description": "Search for bundles result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SearchBundlesResult"
          }
        }
      }
    },
    "SearchForItemsContainingItemResult": {
      "description": "Search for items containing an item result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SearchForItemsContainingItemResult"
          }
        }
      }
    },
    "SearchInStoreResult": {
      "description": "Search within a store result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SearchInStoreResult"
          }
        }
      }
    },
    "SearchStoresResult": {
      "description": "Search for stores result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SearchStoresResult"
          }
        }
      }
    },
    "SearchSubscriptionsResult": {
      "description": "Search for subscriptions result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SearchSubscriptionsResult"
          }
        }
      }
    },
    "SetInventoryItemsResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SetInventoryItemsResult"
          }
        }
      }
    },
    "SetUgcItemModerationStateResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SetUgcItemModerationStateResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "SetVirtualCurrenciesResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SetVirtualCurrenciesResult"
          }
        }
      }
    },
    "SubtractVirtualCurrenciesResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/SubtractVirtualCurrenciesResult"
          }
        }
      }
    },
    "TakedownReviewsResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/TakedownReviewsResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "UpdateBundleResult": {
      "description": "Update bundle result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/UpdateBundleResult"
          }
        }
      }
    },
    "UpdateCatalogConfigResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/UpdateCatalogConfigResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {}
        }
      }
    },
    "UpdateCurrencyResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/UpdateCurrencyResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Currency": {
              "Id": "00000000-0000-0000-0000-000000000004",
              "AlternateIds": [
                {
                  "Type": "FriendlyId",
                  "Value": "AU"
                }
              ],
              "Title": {
                "neutral": "gold",
                "es-MX": "el oro"
              },
              "IsHidden": false,
              "StartDate": "2018-08-17T22:32:10.4729879+00:00",
              "Images": [
                {
                  "Id": "00000000-0000-0000-0000-000000000003",
                  "Tag": "display",
                  "Type": "thumbnail",
                  "Url": "https://endpoint.blob.core.windows.net/some-identifier-private/00000000-0000-0000-0000-000000000003/gold_thumb.jpg"
                }
              ],
              "ETag": "opaqueString"
            }
          }
        }
      }
    },
    "UpdateDraftItemResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/UpdateDraftItemResult"
          }
        },
        "example": {
          "code": 200,
          "status": "OK",
          "data": {
            "Item": {}
          }
        }
      }
    },
    "UpdateInventoryPropertiesItemsResult": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/UpdateInventoryPropertiesItemsResult"
          }
        }
      }
    },
    "UpdateStoreResult": {
      "description": "Update store result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/UpdateStoreResult"
          }
        }
      }
    },
    "UpdateSubscriptionResult": {
      "description": "Update subscription result",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Http status code. If X-ReportErrorAsSuccess header is set to true, this will report the actual http error code."
          },
          "status": {
            "type": "string",
            "description": "The Http status code as a string."
          },
          "data": {
            "$ref": "#/definitions/UpdateSubscriptionResult"
          }
        }
      }
    }
  },
  "x-AnyInclusiveFlags": [
    "Beta"
  ],
  "tags": [
    {
      "name": "Catalog",
      "description": "Catalog Management APIs"
    },
    {
      "name": "Inventory",
      "description": "Player Inventory Management APIs"
    },
    {
      "name": "UserGeneratedContent",
      "description": "User Generated Content Management APIs"
    }
  ],
  "securityDefinitions": {
    "None": {
      "type": "apiKey",
      "in": "header",
      "name": "None",
      "description": "This API requires no authentication headers (usually provides one to other calls)."
    },
    "SessionTicket": {
      "type": "apiKey",
      "in": "header",
      "name": "SessionTicket",
      "description": "This API requires a client session ticket, available from any Client Login function."
    },
    "SecretKey": {
      "type": "apiKey",
      "in": "header",
      "name": "SecretKey",
      "description": "This API requires a title secret key, available to title admins, from PlayFab Game Manager."
    },
    "EntityToken": {
      "type": "apiKey",
      "in": "header",
      "name": "EntityToken",
      "description": "This API requires an Entity Session Token, available from the Entity GetEntityToken method."
    }
  },
  "x-ms-docs-errors-mapping": {
    "Success": {
      "name": "Success"
    },
    "UnkownError": {
      "id": 500,
      "name": "UnkownError"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    },
    "ReceiptDoesNotContainInAppItems": {
      "id": 1096,
      "name": "ReceiptDoesNotContainInAppItems"
    },
    "ReceiptContainsMultipleInAppItems": {
      "id": 1097,
      "name": "ReceiptContainsMultipleInAppItems"
    },
    "InvalidBundleID": {
      "id": 1098,
      "name": "InvalidBundleID"
    },
    "JavascriptException": {
      "id": 1099,
      "name": "JavascriptException"
    },
    "InvalidSessionTicket": {
      "id": 1100,
      "name": "InvalidSessionTicket"
    },
    "UnableToConnectToDatabase": {
      "id": 1101,
      "name": "UnableToConnectToDatabase"
    },
    "InternalServerError": {
      "id": 1110,
      "name": "InternalServerError"
    },
    "InvalidReportDate": {
      "id": 1111,
      "name": "InvalidReportDate"
    },
    "ReportNotAvailable": {
      "id": 1112,
      "name": "ReportNotAvailable"
    },
    "DatabaseThroughputExceeded": {
      "id": 1113,
      "name": "DatabaseThroughputExceeded"
    },
    "InvalidGameTicket": {
      "id": 1115,
      "name": "InvalidGameTicket"
    },
    "ExpiredGameTicket": {
      "id": 1116,
      "name": "ExpiredGameTicket"
    },
    "GameTicketDoesNotMatchLobby": {
      "id": 1117,
      "name": "GameTicketDoesNotMatchLobby"
    },
    "LinkedDeviceAlreadyClaimed": {
      "id": 1118,
      "name": "LinkedDeviceAlreadyClaimed"
    },
    "DeviceAlreadyLinked": {
      "id": 1119,
      "name": "DeviceAlreadyLinked"
    },
    "DeviceNotLinked": {
      "id": 1120,
      "name": "DeviceNotLinked"
    },
    "PartialFailure": {
      "id": 1121,
      "name": "PartialFailure"
    },
    "PublisherNotSet": {
      "id": 1122,
      "name": "PublisherNotSet"
    },
    "ServiceUnavailable": {
      "id": 1123,
      "name": "ServiceUnavailable"
    },
    "VersionNotFound": {
      "id": 1124,
      "name": "VersionNotFound"
    },
    "RevisionNotFound": {
      "id": 1125,
      "name": "RevisionNotFound"
    },
    "InvalidPublisherId": {
      "id": 1126,
      "name": "InvalidPublisherId"
    },
    "DownstreamServiceUnavailable": {
      "id": 1127,
      "name": "DownstreamServiceUnavailable"
    },
    "APINotIncludedInTitleUsageTier": {
      "id": 1128,
      "name": "APINotIncludedInTitleUsageTier"
    },
    "DAULimitExceeded": {
      "id": 1129,
      "name": "DAULimitExceeded"
    },
    "APIRequestLimitExceeded": {
      "id": 1130,
      "name": "APIRequestLimitExceeded"
    },
    "InvalidAPIEndpoint": {
      "id": 1131,
      "name": "InvalidAPIEndpoint"
    },
    "BuildNotAvailable": {
      "id": 1132,
      "name": "BuildNotAvailable"
    },
    "ConcurrentEditError": {
      "id": 1133,
      "name": "ConcurrentEditError"
    },
    "ContentNotFound": {
      "id": 1134,
      "name": "ContentNotFound"
    },
    "CharacterNotFound": {
      "id": 1135,
      "name": "CharacterNotFound"
    },
    "CloudScriptNotFound": {
      "id": 1136,
      "name": "CloudScriptNotFound"
    },
    "ContentQuotaExceeded": {
      "id": 1137,
      "name": "ContentQuotaExceeded"
    },
    "InvalidCharacterStatistics": {
      "id": 1138,
      "name": "InvalidCharacterStatistics"
    },
    "PhotonNotEnabledForTitle": {
      "id": 1139,
      "name": "PhotonNotEnabledForTitle"
    },
    "PhotonApplicationNotFound": {
      "id": 1140,
      "name": "PhotonApplicationNotFound"
    },
    "PhotonApplicationNotAssociatedWithTitle": {
      "id": 1141,
      "name": "PhotonApplicationNotAssociatedWithTitle"
    },
    "InvalidEmailOrPassword": {
      "id": 1142,
      "name": "InvalidEmailOrPassword"
    },
    "FacebookAPIError": {
      "id": 1143,
      "name": "FacebookAPIError"
    },
    "InvalidContentType": {
      "id": 1144,
      "name": "InvalidContentType"
    },
    "KeyLengthExceeded": {
      "id": 1145,
      "name": "KeyLengthExceeded"
    },
    "DataLengthExceeded": {
      "id": 1146,
      "name": "DataLengthExceeded"
    },
    "TooManyKeys": {
      "id": 1147,
      "name": "TooManyKeys"
    },
    "FreeTierCannotHaveVirtualCurrency": {
      "id": 1148,
      "name": "FreeTierCannotHaveVirtualCurrency"
    },
    "MissingAmazonSharedKey": {
      "id": 1149,
      "name": "MissingAmazonSharedKey"
    },
    "AmazonValidationError": {
      "id": 1150,
      "name": "AmazonValidationError"
    },
    "InvalidPSNIssuerId": {
      "id": 1151,
      "name": "InvalidPSNIssuerId"
    },
    "PSNInaccessible": {
      "id": 1152,
      "name": "PSNInaccessible"
    },
    "ExpiredAuthToken": {
      "id": 1153,
      "name": "ExpiredAuthToken"
    },
    "FailedToGetEntitlements": {
      "id": 1154,
      "name": "FailedToGetEntitlements"
    },
    "FailedToConsumeEntitlement": {
      "id": 1155,
      "name": "FailedToConsumeEntitlement"
    },
    "TradeAcceptingUserNotAllowed": {
      "id": 1156,
      "name": "TradeAcceptingUserNotAllowed"
    },
    "TradeInventoryItemIsAssignedToCharacter": {
      "id": 1157,
      "name": "TradeInventoryItemIsAssignedToCharacter"
    },
    "TradeInventoryItemIsBundle": {
      "id": 1158,
      "name": "TradeInventoryItemIsBundle"
    },
    "TradeStatusNotValidForCancelling": {
      "id": 1159,
      "name": "TradeStatusNotValidForCancelling"
    },
    "TradeStatusNotValidForAccepting": {
      "id": 1160,
      "name": "TradeStatusNotValidForAccepting"
    },
    "TradeDoesNotExist": {
      "id": 1161,
      "name": "TradeDoesNotExist"
    },
    "TradeCancelled": {
      "id": 1162,
      "name": "TradeCancelled"
    },
    "TradeAlreadyFilled": {
      "id": 1163,
      "name": "TradeAlreadyFilled"
    },
    "TradeWaitForStatusTimeout": {
      "id": 1164,
      "name": "TradeWaitForStatusTimeout"
    },
    "TradeInventoryItemExpired": {
      "id": 1165,
      "name": "TradeInventoryItemExpired"
    },
    "TradeMissingOfferedAndAcceptedItems": {
      "id": 1166,
      "name": "TradeMissingOfferedAndAcceptedItems"
    },
    "TradeAcceptedItemIsBundle": {
      "id": 1167,
      "name": "TradeAcceptedItemIsBundle"
    },
    "TradeAcceptedItemIsStackable": {
      "id": 1168,
      "name": "TradeAcceptedItemIsStackable"
    },
    "TradeInventoryItemInvalidStatus": {
      "id": 1169,
      "name": "TradeInventoryItemInvalidStatus"
    },
    "TradeAcceptedCatalogItemInvalid": {
      "id": 1170,
      "name": "TradeAcceptedCatalogItemInvalid"
    },
    "TradeAllowedUsersInvalid": {
      "id": 1171,
      "name": "TradeAllowedUsersInvalid"
    },
    "TradeInventoryItemDoesNotExist": {
      "id": 1172,
      "name": "TradeInventoryItemDoesNotExist"
    },
    "TradeInventoryItemIsConsumed": {
      "id": 1173,
      "name": "TradeInventoryItemIsConsumed"
    },
    "TradeInventoryItemIsStackable": {
      "id": 1174,
      "name": "TradeInventoryItemIsStackable"
    },
    "TradeAcceptedItemsMismatch": {
      "id": 1175,
      "name": "TradeAcceptedItemsMismatch"
    },
    "InvalidKongregateToken": {
      "id": 1176,
      "name": "InvalidKongregateToken"
    },
    "FeatureNotConfiguredForTitle": {
      "id": 1177,
      "name": "FeatureNotConfiguredForTitle"
    },
    "NoMatchingCatalogItemForReceipt": {
      "id": 1178,
      "name": "NoMatchingCatalogItemForReceipt"
    },
    "InvalidCurrencyCode": {
      "id": 1179,
      "name": "InvalidCurrencyCode"
    },
    "NoRealMoneyPriceForCatalogItem": {
      "id": 1180,
      "name": "NoRealMoneyPriceForCatalogItem"
    },
    "TradeInventoryItemIsNotTradable": {
      "id": 1181,
      "name": "TradeInventoryItemIsNotTradable"
    },
    "TradeAcceptedCatalogItemIsNotTradable": {
      "id": 1182,
      "name": "TradeAcceptedCatalogItemIsNotTradable"
    },
    "UsersAlreadyFriends": {
      "id": 1183,
      "name": "UsersAlreadyFriends"
    },
    "LinkedIdentifierAlreadyClaimed": {
      "id": 1184,
      "name": "LinkedIdentifierAlreadyClaimed"
    },
    "CustomIdNotLinked": {
      "id": 1185,
      "name": "CustomIdNotLinked"
    },
    "TotalDataSizeExceeded": {
      "id": 1186,
      "name": "TotalDataSizeExceeded"
    },
    "DeleteKeyConflict": {
      "id": 1187,
      "name": "DeleteKeyConflict"
    },
    "InvalidXboxLiveToken": {
      "id": 1188,
      "name": "InvalidXboxLiveToken"
    },
    "ExpiredXboxLiveToken": {
      "id": 1189,
      "name": "ExpiredXboxLiveToken"
    },
    "ResettableStatisticVersionRequired": {
      "id": 1190,
      "name": "ResettableStatisticVersionRequired"
    },
    "NotAuthorizedByTitle": {
      "id": 1191,
      "name": "NotAuthorizedByTitle"
    },
    "NoPartnerEnabled": {
      "id": 1192,
      "name": "NoPartnerEnabled"
    },
    "InvalidPartnerResponse": {
      "id": 1193,
      "name": "InvalidPartnerResponse"
    },
    "APINotEnabledForGameServerAccess": {
      "id": 1194,
      "name": "APINotEnabledForGameServerAccess"
    },
    "StatisticNotFound": {
      "id": 1195,
      "name": "StatisticNotFound"
    },
    "StatisticNameConflict": {
      "id": 1196,
      "name": "StatisticNameConflict"
    },
    "StatisticVersionClosedForWrites": {
      "id": 1197,
      "name": "StatisticVersionClosedForWrites"
    },
    "StatisticVersionInvalid": {
      "id": 1198,
      "name": "StatisticVersionInvalid"
    },
    "APIClientRequestRateLimitExceeded": {
      "id": 1199,
      "name": "APIClientRequestRateLimitExceeded"
    },
    "InvalidJSONContent": {
      "id": 1200,
      "name": "InvalidJSONContent"
    },
    "InvalidDropTable": {
      "id": 1201,
      "name": "InvalidDropTable"
    },
    "StatisticVersionAlreadyIncrementedForScheduledInterval": {
      "id": 1202,
      "name": "StatisticVersionAlreadyIncrementedForScheduledInterval"
    },
    "StatisticCountLimitExceeded": {
      "id": 1203,
      "name": "StatisticCountLimitExceeded"
    },
    "StatisticVersionIncrementRateExceeded": {
      "id": 1204,
      "name": "StatisticVersionIncrementRateExceeded"
    },
    "ContainerKeyInvalid": {
      "id": 1205,
      "name": "ContainerKeyInvalid"
    },
    "CloudScriptExecutionTimeLimitExceeded": {
      "id": 1206,
      "name": "CloudScriptExecutionTimeLimitExceeded"
    },
    "NoWritePermissionsForEvent": {
      "id": 1207,
      "name": "NoWritePermissionsForEvent"
    },
    "CloudScriptFunctionArgumentSizeExceeded": {
      "id": 1208,
      "name": "CloudScriptFunctionArgumentSizeExceeded"
    },
    "CloudScriptAPIRequestCountExceeded": {
      "id": 1209,
      "name": "CloudScriptAPIRequestCountExceeded"
    },
    "CloudScriptAPIRequestError": {
      "id": 1210,
      "name": "CloudScriptAPIRequestError"
    },
    "CloudScriptHTTPRequestError": {
      "id": 1211,
      "name": "CloudScriptHTTPRequestError"
    },
    "InsufficientGuildRole": {
      "id": 1212,
      "name": "InsufficientGuildRole"
    },
    "GuildNotFound": {
      "id": 1213,
      "name": "GuildNotFound"
    },
    "OverLimit": {
      "id": 1214,
      "name": "OverLimit"
    },
    "EventNotFound": {
      "id": 1215,
      "name": "EventNotFound"
    },
    "InvalidEventField": {
      "id": 1216,
      "name": "InvalidEventField"
    },
    "InvalidEventName": {
      "id": 1217,
      "name": "InvalidEventName"
    },
    "CatalogNotConfigured": {
      "id": 1218,
      "name": "CatalogNotConfigured"
    },
    "OperationNotSupportedForPlatform": {
      "id": 1219,
      "name": "OperationNotSupportedForPlatform"
    },
    "SegmentNotFound": {
      "id": 1220,
      "name": "SegmentNotFound"
    },
    "StoreNotFound": {
      "id": 1221,
      "name": "StoreNotFound"
    },
    "InvalidStatisticName": {
      "id": 1222,
      "name": "InvalidStatisticName"
    },
    "TitleNotQualifiedForLimit": {
      "id": 1223,
      "name": "TitleNotQualifiedForLimit"
    },
    "InvalidServiceLimitLevel": {
      "id": 1224,
      "name": "InvalidServiceLimitLevel"
    },
    "ServiceLimitLevelInTransition": {
      "id": 1225,
      "name": "ServiceLimitLevelInTransition"
    },
    "CouponAlreadyRedeemed": {
      "id": 1226,
      "name": "CouponAlreadyRedeemed"
    },
    "GameServerBuildSizeLimitExceeded": {
      "id": 1227,
      "name": "GameServerBuildSizeLimitExceeded"
    },
    "GameServerBuildCountLimitExceeded": {
      "id": 1228,
      "name": "GameServerBuildCountLimitExceeded"
    },
    "VirtualCurrencyCountLimitExceeded": {
      "id": 1229,
      "name": "VirtualCurrencyCountLimitExceeded"
    },
    "VirtualCurrencyCodeExists": {
      "id": 1230,
      "name": "VirtualCurrencyCodeExists"
    },
    "TitleNewsItemCountLimitExceeded": {
      "id": 1231,
      "name": "TitleNewsItemCountLimitExceeded"
    },
    "InvalidTwitchToken": {
      "id": 1232,
      "name": "InvalidTwitchToken"
    },
    "TwitchResponseError": {
      "id": 1233,
      "name": "TwitchResponseError"
    },
    "ProfaneDisplayName": {
      "id": 1234,
      "name": "ProfaneDisplayName"
    },
    "UserAlreadyAdded": {
      "id": 1235,
      "name": "UserAlreadyAdded"
    },
    "InvalidVirtualCurrencyCode": {
      "id": 1236,
      "name": "InvalidVirtualCurrencyCode"
    },
    "VirtualCurrencyCannotBeDeleted": {
      "id": 1237,
      "name": "VirtualCurrencyCannotBeDeleted"
    },
    "IdentifierAlreadyClaimed": {
      "id": 1238,
      "name": "IdentifierAlreadyClaimed"
    },
    "IdentifierNotLinked": {
      "id": 1239,
      "name": "IdentifierNotLinked"
    },
    "InvalidContinuationToken": {
      "id": 1240,
      "name": "InvalidContinuationToken"
    },
    "ExpiredContinuationToken": {
      "id": 1241,
      "name": "ExpiredContinuationToken"
    },
    "InvalidSegment": {
      "id": 1242,
      "name": "InvalidSegment"
    },
    "InvalidSessionId": {
      "id": 1243,
      "name": "InvalidSessionId"
    },
    "SessionLogNotFound": {
      "id": 1244,
      "name": "SessionLogNotFound"
    },
    "InvalidSearchTerm": {
      "id": 1245,
      "name": "InvalidSearchTerm"
    },
    "TwoFactorAuthenticationTokenRequired": {
      "id": 1246,
      "name": "TwoFactorAuthenticationTokenRequired"
    },
    "GameServerHostCountLimitExceeded": {
      "id": 1247,
      "name": "GameServerHostCountLimitExceeded"
    },
    "PlayerTagCountLimitExceeded": {
      "id": 1248,
      "name": "PlayerTagCountLimitExceeded"
    },
    "RequestAlreadyRunning": {
      "id": 1249,
      "name": "RequestAlreadyRunning"
    },
    "ActionGroupNotFound": {
      "id": 1250,
      "name": "ActionGroupNotFound"
    },
    "MaximumSegmentBulkActionJobsRunning": {
      "id": 1251,
      "name": "MaximumSegmentBulkActionJobsRunning"
    },
    "NoActionsOnPlayersInSegmentJob": {
      "id": 1252,
      "name": "NoActionsOnPlayersInSegmentJob"
    },
    "DuplicateStatisticName": {
      "id": 1253,
      "name": "DuplicateStatisticName"
    },
    "ScheduledTaskNameConflict": {
      "id": 1254,
      "name": "ScheduledTaskNameConflict"
    },
    "ScheduledTaskCreateConflict": {
      "id": 1255,
      "name": "ScheduledTaskCreateConflict"
    },
    "InvalidScheduledTaskName": {
      "id": 1256,
      "name": "InvalidScheduledTaskName"
    },
    "InvalidTaskSchedule": {
      "id": 1257,
      "name": "InvalidTaskSchedule"
    },
    "SteamNotEnabledForTitle": {
      "id": 1258,
      "name": "SteamNotEnabledForTitle"
    },
    "LimitNotAnUpgradeOption": {
      "id": 1259,
      "name": "LimitNotAnUpgradeOption"
    },
    "NoSecretKeyEnabledForCloudScript": {
      "id": 1260,
      "name": "NoSecretKeyEnabledForCloudScript"
    },
    "TaskNotFound": {
      "id": 1261,
      "name": "TaskNotFound"
    },
    "TaskInstanceNotFound": {
      "id": 1262,
      "name": "TaskInstanceNotFound"
    },
    "InvalidIdentityProviderId": {
      "id": 1263,
      "name": "InvalidIdentityProviderId"
    },
    "MisconfiguredIdentityProvider": {
      "id": 1264,
      "name": "MisconfiguredIdentityProvider"
    },
    "InvalidScheduledTaskType": {
      "id": 1265,
      "name": "InvalidScheduledTaskType"
    },
    "BillingInformationRequired": {
      "id": 1266,
      "name": "BillingInformationRequired"
    },
    "LimitedEditionItemUnavailable": {
      "id": 1267,
      "name": "LimitedEditionItemUnavailable"
    },
    "InvalidAdPlacementAndReward": {
      "id": 1268,
      "name": "InvalidAdPlacementAndReward"
    },
    "AllAdPlacementViewsAlreadyConsumed": {
      "id": 1269,
      "name": "AllAdPlacementViewsAlreadyConsumed"
    },
    "GoogleOAuthNotConfiguredForTitle": {
      "id": 1270,
      "name": "GoogleOAuthNotConfiguredForTitle"
    },
    "GoogleOAuthError": {
      "id": 1271,
      "name": "GoogleOAuthError"
    },
    "UserNotFriend": {
      "id": 1272,
      "name": "UserNotFriend"
    },
    "InvalidSignature": {
      "id": 1273,
      "name": "InvalidSignature"
    },
    "InvalidPublicKey": {
      "id": 1274,
      "name": "InvalidPublicKey"
    },
    "GoogleOAuthNoIdTokenIncludedInResponse": {
      "id": 1275,
      "name": "GoogleOAuthNoIdTokenIncludedInResponse"
    },
    "StatisticUpdateInProgress": {
      "id": 1276,
      "name": "StatisticUpdateInProgress"
    },
    "LeaderboardVersionNotAvailable": {
      "id": 1277,
      "name": "LeaderboardVersionNotAvailable"
    },
    "StatisticAlreadyHasPrizeTable": {
      "id": 1279,
      "name": "StatisticAlreadyHasPrizeTable"
    },
    "PrizeTableHasOverlappingRanks": {
      "id": 1280,
      "name": "PrizeTableHasOverlappingRanks"
    },
    "PrizeTableHasMissingRanks": {
      "id": 1281,
      "name": "PrizeTableHasMissingRanks"
    },
    "PrizeTableRankStartsAtZero": {
      "id": 1282,
      "name": "PrizeTableRankStartsAtZero"
    },
    "InvalidStatistic": {
      "id": 1283,
      "name": "InvalidStatistic"
    },
    "ExpressionParseFailure": {
      "id": 1284,
      "name": "ExpressionParseFailure"
    },
    "ExpressionInvokeFailure": {
      "id": 1285,
      "name": "ExpressionInvokeFailure"
    },
    "ExpressionTooLong": {
      "id": 1286,
      "name": "ExpressionTooLong"
    },
    "DataUpdateRateExceeded": {
      "id": 1287,
      "name": "DataUpdateRateExceeded"
    },
    "RestrictedEmailDomain": {
      "id": 1288,
      "name": "RestrictedEmailDomain"
    },
    "EncryptionKeyDisabled": {
      "id": 1289,
      "name": "EncryptionKeyDisabled"
    },
    "EncryptionKeyMissing": {
      "id": 1290,
      "name": "EncryptionKeyMissing"
    },
    "EncryptionKeyBroken": {
      "id": 1291,
      "name": "EncryptionKeyBroken"
    },
    "NoSharedSecretKeyConfigured": {
      "id": 1292,
      "name": "NoSharedSecretKeyConfigured"
    },
    "SecretKeyNotFound": {
      "id": 1293,
      "name": "SecretKeyNotFound"
    },
    "PlayerSecretAlreadyConfigured": {
      "id": 1294,
      "name": "PlayerSecretAlreadyConfigured"
    },
    "APIRequestsDisabledForTitle": {
      "id": 1295,
      "name": "APIRequestsDisabledForTitle"
    },
    "InvalidSharedSecretKey": {
      "id": 1296,
      "name": "InvalidSharedSecretKey"
    },
    "PrizeTableHasNoRanks": {
      "id": 1297,
      "name": "PrizeTableHasNoRanks"
    },
    "ProfileDoesNotExist": {
      "id": 1298,
      "name": "ProfileDoesNotExist"
    },
    "ContentS3OriginBucketNotConfigured": {
      "id": 1299,
      "name": "ContentS3OriginBucketNotConfigured"
    },
    "InvalidEnvironmentForReceipt": {
      "id": 1300,
      "name": "InvalidEnvironmentForReceipt"
    },
    "EncryptedRequestNotAllowed": {
      "id": 1301,
      "name": "EncryptedRequestNotAllowed"
    },
    "SignedRequestNotAllowed": {
      "id": 1302,
      "name": "SignedRequestNotAllowed"
    },
    "RequestViewConstraintParamsNotAllowed": {
      "id": 1303,
      "name": "RequestViewConstraintParamsNotAllowed"
    },
    "BadPartnerConfiguration": {
      "id": 1304,
      "name": "BadPartnerConfiguration"
    },
    "XboxBPCertificateFailure": {
      "id": 1305,
      "name": "XboxBPCertificateFailure"
    },
    "XboxXASSExchangeFailure": {
      "id": 1306,
      "name": "XboxXASSExchangeFailure"
    },
    "InvalidEntityId": {
      "id": 1307,
      "name": "InvalidEntityId"
    },
    "StatisticValueAggregationOverflow": {
      "id": 1308,
      "name": "StatisticValueAggregationOverflow"
    },
    "EmailMessageFromAddressIsMissing": {
      "id": 1309,
      "name": "EmailMessageFromAddressIsMissing"
    },
    "EmailMessageToAddressIsMissing": {
      "id": 1310,
      "name": "EmailMessageToAddressIsMissing"
    },
    "SmtpServerAuthenticationError": {
      "id": 1311,
      "name": "SmtpServerAuthenticationError"
    },
    "SmtpServerLimitExceeded": {
      "id": 1312,
      "name": "SmtpServerLimitExceeded"
    },
    "SmtpServerInsufficientStorage": {
      "id": 1313,
      "name": "SmtpServerInsufficientStorage"
    },
    "SmtpServerCommunicationError": {
      "id": 1314,
      "name": "SmtpServerCommunicationError"
    },
    "SmtpServerGeneralFailure": {
      "id": 1315,
      "name": "SmtpServerGeneralFailure"
    },
    "EmailClientTimeout": {
      "id": 1316,
      "name": "EmailClientTimeout"
    },
    "EmailClientCanceledTask": {
      "id": 1317,
      "name": "EmailClientCanceledTask"
    },
    "EmailTemplateMissing": {
      "id": 1318,
      "name": "EmailTemplateMissing"
    },
    "InvalidHostForTitleId": {
      "id": 1319,
      "name": "InvalidHostForTitleId"
    },
    "EmailConfirmationTokenDoesNotExist": {
      "id": 1320,
      "name": "EmailConfirmationTokenDoesNotExist"
    },
    "EmailConfirmationTokenExpired": {
      "id": 1321,
      "name": "EmailConfirmationTokenExpired"
    },
    "AccountDeleted": {
      "id": 1322,
      "name": "AccountDeleted"
    },
    "PlayerSecretNotConfigured": {
      "id": 1323,
      "name": "PlayerSecretNotConfigured"
    },
    "InvalidSignatureTime": {
      "id": 1324,
      "name": "InvalidSignatureTime"
    },
    "NoContactEmailAddressFound": {
      "id": 1325,
      "name": "NoContactEmailAddressFound"
    },
    "InvalidAuthToken": {
      "id": 1326,
      "name": "InvalidAuthToken"
    },
    "AuthTokenDoesNotExist": {
      "id": 1327,
      "name": "AuthTokenDoesNotExist"
    },
    "AuthTokenExpired": {
      "id": 1328,
      "name": "AuthTokenExpired"
    },
    "AuthTokenAlreadyUsedToResetPassword": {
      "id": 1329,
      "name": "AuthTokenAlreadyUsedToResetPassword"
    },
    "MembershipNameTooLong": {
      "id": 1330,
      "name": "MembershipNameTooLong"
    },
    "MembershipNotFound": {
      "id": 1331,
      "name": "MembershipNotFound"
    },
    "GoogleServiceAccountInvalid": {
      "id": 1332,
      "name": "GoogleServiceAccountInvalid"
    },
    "GoogleServiceAccountParseFailure": {
      "id": 1333,
      "name": "GoogleServiceAccountParseFailure"
    },
    "EntityTokenMissing": {
      "id": 1334,
      "name": "EntityTokenMissing"
    },
    "EntityTokenInvalid": {
      "id": 1335,
      "name": "EntityTokenInvalid"
    },
    "EntityTokenExpired": {
      "id": 1336,
      "name": "EntityTokenExpired"
    },
    "EntityTokenRevoked": {
      "id": 1337,
      "name": "EntityTokenRevoked"
    },
    "InvalidProductForSubscription": {
      "id": 1338,
      "name": "InvalidProductForSubscription"
    },
    "XboxInaccessible": {
      "id": 1339,
      "name": "XboxInaccessible"
    },
    "SubscriptionAlreadyTaken": {
      "id": 1340,
      "name": "SubscriptionAlreadyTaken"
    },
    "SmtpAddonNotEnabled": {
      "id": 1341,
      "name": "SmtpAddonNotEnabled"
    },
    "APIConcurrentRequestLimitExceeded": {
      "id": 1342,
      "name": "APIConcurrentRequestLimitExceeded"
    },
    "XboxRejectedXSTSExchangeRequest": {
      "id": 1343,
      "name": "XboxRejectedXSTSExchangeRequest"
    },
    "VariableNotDefined": {
      "id": 1344,
      "name": "VariableNotDefined"
    },
    "TemplateVersionNotDefined": {
      "id": 1345,
      "name": "TemplateVersionNotDefined"
    },
    "FileTooLarge": {
      "id": 1346,
      "name": "FileTooLarge"
    },
    "TitleDeleted": {
      "id": 1347,
      "name": "TitleDeleted"
    },
    "TitleContainsUserAccounts": {
      "id": 1348,
      "name": "TitleContainsUserAccounts"
    },
    "TitleDeletionPlayerCleanupFailure": {
      "id": 1349,
      "name": "TitleDeletionPlayerCleanupFailure"
    },
    "EntityFileOperationPending": {
      "id": 1350,
      "name": "EntityFileOperationPending"
    },
    "NoEntityFileOperationPending": {
      "id": 1351,
      "name": "NoEntityFileOperationPending"
    },
    "EntityProfileVersionMismatch": {
      "id": 1352,
      "name": "EntityProfileVersionMismatch"
    },
    "TemplateVersionTooOld": {
      "id": 1353,
      "name": "TemplateVersionTooOld"
    },
    "MembershipDefinitionInUse": {
      "id": 1354,
      "name": "MembershipDefinitionInUse"
    },
    "PaymentPageNotConfigured": {
      "id": 1355,
      "name": "PaymentPageNotConfigured"
    },
    "FailedLoginAttemptRateLimitExceeded": {
      "id": 1356,
      "name": "FailedLoginAttemptRateLimitExceeded"
    },
    "EntityBlockedByGroup": {
      "id": 1357,
      "name": "EntityBlockedByGroup"
    },
    "RoleDoesNotExist": {
      "id": 1358,
      "name": "RoleDoesNotExist"
    },
    "EntityIsAlreadyMember": {
      "id": 1359,
      "name": "EntityIsAlreadyMember"
    },
    "DuplicateRoleId": {
      "id": 1360,
      "name": "DuplicateRoleId"
    },
    "GroupInvitationNotFound": {
      "id": 1361,
      "name": "GroupInvitationNotFound"
    },
    "GroupApplicationNotFound": {
      "id": 1362,
      "name": "GroupApplicationNotFound"
    },
    "OutstandingInvitationAcceptedInstead": {
      "id": 1363,
      "name": "OutstandingInvitationAcceptedInstead"
    },
    "OutstandingApplicationAcceptedInstead": {
      "id": 1364,
      "name": "OutstandingApplicationAcceptedInstead"
    },
    "RoleIsGroupDefaultMember": {
      "id": 1365,
      "name": "RoleIsGroupDefaultMember"
    },
    "RoleIsGroupAdmin": {
      "id": 1366,
      "name": "RoleIsGroupAdmin"
    },
    "RoleNameNotAvailable": {
      "id": 1367,
      "name": "RoleNameNotAvailable"
    },
    "GroupNameNotAvailable": {
      "id": 1368,
      "name": "GroupNameNotAvailable"
    },
    "EmailReportAlreadySent": {
      "id": 1369,
      "name": "EmailReportAlreadySent"
    },
    "EmailReportRecipientBlacklisted": {
      "id": 1370,
      "name": "EmailReportRecipientBlacklisted"
    },
    "EventNamespaceNotAllowed": {
      "id": 1371,
      "name": "EventNamespaceNotAllowed"
    },
    "EventEntityNotAllowed": {
      "id": 1372,
      "name": "EventEntityNotAllowed"
    },
    "InvalidEntityType": {
      "id": 1373,
      "name": "InvalidEntityType"
    },
    "NullTokenResultFromAad": {
      "id": 1374,
      "name": "NullTokenResultFromAad"
    },
    "InvalidTokenResultFromAad": {
      "id": 1375,
      "name": "InvalidTokenResultFromAad"
    },
    "NoValidCertificateForAad": {
      "id": 1376,
      "name": "NoValidCertificateForAad"
    },
    "InvalidCertificateForAad": {
      "id": 1377,
      "name": "InvalidCertificateForAad"
    },
    "DuplicateDropTableId": {
      "id": 1378,
      "name": "DuplicateDropTableId"
    },
    "MultiplayerServerError": {
      "id": 1379,
      "name": "MultiplayerServerError"
    },
    "MultiplayerServerTooManyRequests": {
      "id": 1380,
      "name": "MultiplayerServerTooManyRequests"
    },
    "MultiplayerServerNoContent": {
      "id": 1381,
      "name": "MultiplayerServerNoContent"
    },
    "MultiplayerServerBadRequest": {
      "id": 1382,
      "name": "MultiplayerServerBadRequest"
    },
    "MultiplayerServerUnauthorized": {
      "id": 1383,
      "name": "MultiplayerServerUnauthorized"
    },
    "MultiplayerServerForbidden": {
      "id": 1384,
      "name": "MultiplayerServerForbidden"
    },
    "MultiplayerServerNotFound": {
      "id": 1385,
      "name": "MultiplayerServerNotFound"
    },
    "MultiplayerServerConflict": {
      "id": 1386,
      "name": "MultiplayerServerConflict"
    },
    "MultiplayerServerInternalServerError": {
      "id": 1387,
      "name": "MultiplayerServerInternalServerError"
    },
    "MultiplayerServerUnavailable": {
      "id": 1388,
      "name": "MultiplayerServerUnavailable"
    },
    "ExplicitContentDetected": {
      "id": 1389,
      "name": "ExplicitContentDetected"
    },
    "PIIContentDetected": {
      "id": 1390,
      "name": "PIIContentDetected"
    },
    "InvalidScheduledTaskParameter": {
      "id": 1391,
      "name": "InvalidScheduledTaskParameter"
    },
    "PerEntityEventRateLimitExceeded": {
      "id": 1392,
      "name": "PerEntityEventRateLimitExceeded"
    },
    "TitleDefaultLanguageNotSet": {
      "id": 1393,
      "name": "TitleDefaultLanguageNotSet"
    },
    "EmailTemplateMissingDefaultVersion": {
      "id": 1394,
      "name": "EmailTemplateMissingDefaultVersion"
    },
    "FacebookInstantGamesIdNotLinked": {
      "id": 1395,
      "name": "FacebookInstantGamesIdNotLinked"
    },
    "InvalidFacebookInstantGamesSignature": {
      "id": 1396,
      "name": "InvalidFacebookInstantGamesSignature"
    },
    "FacebookInstantGamesAuthNotConfiguredForTitle": {
      "id": 1397,
      "name": "FacebookInstantGamesAuthNotConfiguredForTitle"
    },
    "EntityProfileConstraintValidationFailed": {
      "id": 1398,
      "name": "EntityProfileConstraintValidationFailed"
    },
    "TelemetryIngestionKeyPending": {
      "id": 1399,
      "name": "TelemetryIngestionKeyPending"
    },
    "TelemetryIngestionKeyNotFound": {
      "id": 1400,
      "name": "TelemetryIngestionKeyNotFound"
    },
    "StatisticChildNameInvalid": {
      "id": 1402,
      "name": "StatisticChildNameInvalid"
    },
    "DataIntegrityError": {
      "id": 1403,
      "name": "DataIntegrityError"
    },
    "VirtualCurrencyCannotBeSetToOlderVersion": {
      "id": 1404,
      "name": "VirtualCurrencyCannotBeSetToOlderVersion"
    },
    "VirtualCurrencyMustBeWithinIntegerRange": {
      "id": 1405,
      "name": "VirtualCurrencyMustBeWithinIntegerRange"
    },
    "EmailTemplateInvalidSyntax": {
      "id": 1406,
      "name": "EmailTemplateInvalidSyntax"
    },
    "EmailTemplateMissingCallback": {
      "id": 1407,
      "name": "EmailTemplateMissingCallback"
    },
    "PushNotificationTemplateInvalidPayload": {
      "id": 1408,
      "name": "PushNotificationTemplateInvalidPayload"
    },
    "InvalidLocalizedPushNotificationLanguage": {
      "id": 1409,
      "name": "InvalidLocalizedPushNotificationLanguage"
    },
    "MissingLocalizedPushNotificationMessage": {
      "id": 1410,
      "name": "MissingLocalizedPushNotificationMessage"
    },
    "PushNotificationTemplateMissingPlatformPayload": {
      "id": 1411,
      "name": "PushNotificationTemplateMissingPlatformPayload"
    },
    "PushNotificationTemplatePayloadContainsInvalidJson": {
      "id": 1412,
      "name": "PushNotificationTemplatePayloadContainsInvalidJson"
    },
    "PushNotificationTemplateContainsInvalidIosPayload": {
      "id": 1413,
      "name": "PushNotificationTemplateContainsInvalidIosPayload"
    },
    "PushNotificationTemplateContainsInvalidAndroidPayload": {
      "id": 1414,
      "name": "PushNotificationTemplateContainsInvalidAndroidPayload"
    },
    "PushNotificationTemplateIosPayloadMissingNotificationBody": {
      "id": 1415,
      "name": "PushNotificationTemplateIosPayloadMissingNotificationBody"
    },
    "PushNotificationTemplateAndroidPayloadMissingNotificationBody": {
      "id": 1416,
      "name": "PushNotificationTemplateAndroidPayloadMissingNotificationBody"
    },
    "PushNotificationTemplateNotFound": {
      "id": 1417,
      "name": "PushNotificationTemplateNotFound"
    },
    "PushNotificationTemplateMissingDefaultVersion": {
      "id": 1418,
      "name": "PushNotificationTemplateMissingDefaultVersion"
    },
    "PushNotificationTemplateInvalidSyntax": {
      "id": 1419,
      "name": "PushNotificationTemplateInvalidSyntax"
    },
    "PushNotificationTemplateNoCustomPayloadForV1": {
      "id": 1420,
      "name": "PushNotificationTemplateNoCustomPayloadForV1"
    },
    "NoLeaderboardForStatistic": {
      "id": 1421,
      "name": "NoLeaderboardForStatistic"
    },
    "TitleNewsMissingDefaultLanguage": {
      "id": 1422,
      "name": "TitleNewsMissingDefaultLanguage"
    },
    "TitleNewsNotFound": {
      "id": 1423,
      "name": "TitleNewsNotFound"
    },
    "TitleNewsDuplicateLanguage": {
      "id": 1424,
      "name": "TitleNewsDuplicateLanguage"
    },
    "TitleNewsMissingTitleOrBody": {
      "id": 1425,
      "name": "TitleNewsMissingTitleOrBody"
    },
    "TitleNewsInvalidLanguage": {
      "id": 1426,
      "name": "TitleNewsInvalidLanguage"
    },
    "EmailRecipientBlacklisted": {
      "id": 1427,
      "name": "EmailRecipientBlacklisted"
    },
    "InvalidGameCenterAuthRequest": {
      "id": 1428,
      "name": "InvalidGameCenterAuthRequest"
    },
    "GameCenterAuthenticationFailed": {
      "id": 1429,
      "name": "GameCenterAuthenticationFailed"
    },
    "CannotEnablePartiesForTitle": {
      "id": 1430,
      "name": "CannotEnablePartiesForTitle"
    },
    "PartyError": {
      "id": 1431,
      "name": "PartyError"
    },
    "PartyRequests": {
      "id": 1432,
      "name": "PartyRequests"
    },
    "PartyNoContent": {
      "id": 1433,
      "name": "PartyNoContent"
    },
    "PartyBadRequest": {
      "id": 1434,
      "name": "PartyBadRequest"
    },
    "PartyUnauthorized": {
      "id": 1435,
      "name": "PartyUnauthorized"
    },
    "PartyForbidden": {
      "id": 1436,
      "name": "PartyForbidden"
    },
    "PartyNotFound": {
      "id": 1437,
      "name": "PartyNotFound"
    },
    "PartyConflict": {
      "id": 1438,
      "name": "PartyConflict"
    },
    "PartyInternalServerError": {
      "id": 1439,
      "name": "PartyInternalServerError"
    },
    "PartyUnavailable": {
      "id": 1440,
      "name": "PartyUnavailable"
    },
    "PartyTooManyRequests": {
      "id": 1441,
      "name": "PartyTooManyRequests"
    },
    "PushNotificationTemplateMissingName": {
      "id": 1442,
      "name": "PushNotificationTemplateMissingName"
    },
    "CannotEnableMultiplayerServersForTitle": {
      "id": 1443,
      "name": "CannotEnableMultiplayerServersForTitle"
    },
    "WriteAttemptedDuringExport": {
      "id": 1444,
      "name": "WriteAttemptedDuringExport"
    },
    "MultiplayerServerTitleQuotaCoresExceeded": {
      "id": 1445,
      "name": "MultiplayerServerTitleQuotaCoresExceeded"
    },
    "AutomationRuleNotFound": {
      "id": 1446,
      "name": "AutomationRuleNotFound"
    },
    "EntityAPIKeyLimitExceeded": {
      "id": 1447,
      "name": "EntityAPIKeyLimitExceeded"
    },
    "EntityAPIKeyNotFound": {
      "id": 1448,
      "name": "EntityAPIKeyNotFound"
    },
    "EntityAPIKeyOrSecretInvalid": {
      "id": 1449,
      "name": "EntityAPIKeyOrSecretInvalid"
    },
    "EconomyServiceUnavailable": {
      "id": 1450,
      "name": "EconomyServiceUnavailable"
    },
    "EconomyServiceInternalError": {
      "id": 1451,
      "name": "EconomyServiceInternalError"
    },
    "QueryRateLimitExceeded": {
      "id": 1452,
      "name": "QueryRateLimitExceeded"
    },
    "EntityAPIKeyCreationDisabledForEntity": {
      "id": 1453,
      "name": "EntityAPIKeyCreationDisabledForEntity"
    },
    "ForbiddenByEntityPolicy": {
      "id": 1454,
      "name": "ForbiddenByEntityPolicy"
    },
    "StudioCreationRateLimited": {
      "id": 1456,
      "name": "StudioCreationRateLimited"
    },
    "StudioCreationInProgress": {
      "id": 1457,
      "name": "StudioCreationInProgress"
    },
    "DuplicateStudioName": {
      "id": 1458,
      "name": "DuplicateStudioName"
    },
    "StudioNotFound": {
      "id": 1459,
      "name": "StudioNotFound"
    },
    "StudioDeleted": {
      "id": 1460,
      "name": "StudioDeleted"
    },
    "StudioDeactivated": {
      "id": 1461,
      "name": "StudioDeactivated"
    },
    "StudioActivated": {
      "id": 1462,
      "name": "StudioActivated"
    },
    "TitleCreationRateLimited": {
      "id": 1463,
      "name": "TitleCreationRateLimited"
    },
    "TitleCreationInProgress": {
      "id": 1464,
      "name": "TitleCreationInProgress"
    },
    "DuplicateTitleName": {
      "id": 1465,
      "name": "DuplicateTitleName"
    },
    "TitleActivationRateLimited": {
      "id": 1466,
      "name": "TitleActivationRateLimited"
    },
    "TitleActivationInProgress": {
      "id": 1467,
      "name": "TitleActivationInProgress"
    },
    "TitleDeactivated": {
      "id": 1468,
      "name": "TitleDeactivated"
    },
    "TitleActivated": {
      "id": 1469,
      "name": "TitleActivated"
    },
    "CloudScriptAzureFunctionsExecutionTimeLimitExceeded": {
      "id": 1470,
      "name": "CloudScriptAzureFunctionsExecutionTimeLimitExceeded"
    },
    "CloudScriptAzureFunctionsArgumentSizeExceeded": {
      "id": 1471,
      "name": "CloudScriptAzureFunctionsArgumentSizeExceeded"
    },
    "CloudScriptAzureFunctionsReturnSizeExceeded": {
      "id": 1472,
      "name": "CloudScriptAzureFunctionsReturnSizeExceeded"
    },
    "CloudScriptAzureFunctionsHTTPRequestError": {
      "id": 1473,
      "name": "CloudScriptAzureFunctionsHTTPRequestError"
    },
    "MatchmakingEntityInvalid": {
      "id": 2001,
      "name": "MatchmakingEntityInvalid"
    },
    "MatchmakingPlayerAttributesInvalid": {
      "id": 2002,
      "name": "MatchmakingPlayerAttributesInvalid"
    },
    "MatchmakingQueueNotFound": {
      "id": 2016,
      "name": "MatchmakingQueueNotFound"
    },
    "MatchmakingMatchNotFound": {
      "id": 2017,
      "name": "MatchmakingMatchNotFound"
    },
    "MatchmakingTicketNotFound": {
      "id": 2018,
      "name": "MatchmakingTicketNotFound"
    },
    "MatchmakingAlreadyJoinedTicket": {
      "id": 2028,
      "name": "MatchmakingAlreadyJoinedTicket"
    },
    "MatchmakingTicketAlreadyCompleted": {
      "id": 2029,
      "name": "MatchmakingTicketAlreadyCompleted"
    },
    "MatchmakingQueueConfigInvalid": {
      "id": 2031,
      "name": "MatchmakingQueueConfigInvalid"
    },
    "MatchmakingMemberProfileInvalid": {
      "id": 2032,
      "name": "MatchmakingMemberProfileInvalid"
    },
    "NintendoSwitchDeviceIdNotLinked": {
      "id": 2034,
      "name": "NintendoSwitchDeviceIdNotLinked"
    },
    "MatchmakingNotEnabled": {
      "id": 2035,
      "name": "MatchmakingNotEnabled"
    },
    "MatchmakingPlayerAttributesTooLarge": {
      "id": 2043,
      "name": "MatchmakingPlayerAttributesTooLarge"
    },
    "MatchmakingNumberOfPlayersInTicketTooLarge": {
      "id": 2044,
      "name": "MatchmakingNumberOfPlayersInTicketTooLarge"
    },
    "MatchmakingAttributeInvalid": {
      "id": 2046,
      "name": "MatchmakingAttributeInvalid"
    },
    "MatchmakingPlayerHasNotJoinedTicket": {
      "id": 2053,
      "name": "MatchmakingPlayerHasNotJoinedTicket"
    },
    "MatchmakingRateLimitExceeded": {
      "id": 2054,
      "name": "MatchmakingRateLimitExceeded"
    },
    "MatchmakingTicketMembershipLimitExceeded": {
      "id": 2055,
      "name": "MatchmakingTicketMembershipLimitExceeded"
    },
    "MatchmakingUnauthorized": {
      "id": 2056,
      "name": "MatchmakingUnauthorized"
    },
    "MatchmakingQueueLimitExceeded": {
      "id": 2057,
      "name": "MatchmakingQueueLimitExceeded"
    },
    "MatchmakingRequestTypeMismatch": {
      "id": 2058,
      "name": "MatchmakingRequestTypeMismatch"
    },
    "MatchmakingBadRequest": {
      "id": 2059,
      "name": "MatchmakingBadRequest"
    },
    "TitleConfigNotFound": {
      "id": 3001,
      "name": "TitleConfigNotFound"
    },
    "TitleConfigUpdateConflict": {
      "id": 3002,
      "name": "TitleConfigUpdateConflict"
    },
    "TitleConfigSerializationError": {
      "id": 3003,
      "name": "TitleConfigSerializationError"
    },
    "CatalogEntityInvalid": {
      "id": 4001,
      "name": "CatalogEntityInvalid"
    },
    "CatalogTitleIdMissing": {
      "id": 4002,
      "name": "CatalogTitleIdMissing"
    },
    "CatalogPlayerIdMissing": {
      "id": 4003,
      "name": "CatalogPlayerIdMissing"
    },
    "CatalogClientIdentityInvalid": {
      "id": 4004,
      "name": "CatalogClientIdentityInvalid"
    },
    "CatalogOneOrMoreFilesInvalid": {
      "id": 4005,
      "name": "CatalogOneOrMoreFilesInvalid"
    },
    "CatalogItemMetadataInvalid": {
      "id": 4006,
      "name": "CatalogItemMetadataInvalid"
    },
    "CatalogItemIdInvalid": {
      "id": 4007,
      "name": "CatalogItemIdInvalid"
    },
    "CatalogSearchParameterInvalid": {
      "id": 4008,
      "name": "CatalogSearchParameterInvalid"
    },
    "CatalogFeatureDisabled": {
      "id": 4009,
      "name": "CatalogFeatureDisabled"
    },
    "CatalogConfigInvalid": {
      "id": 4010,
      "name": "CatalogConfigInvalid"
    },
    "CatalogUnauthorized": {
      "id": 4011,
      "name": "CatalogUnauthorized"
    },
    "CatalogItemTypeInvalid": {
      "id": 4012,
      "name": "CatalogItemTypeInvalid"
    },
    "ExportInvalidStatusUpdate": {
      "id": 5000,
      "name": "ExportInvalidStatusUpdate"
    },
    "ExportInvalidPrefix": {
      "id": 5001,
      "name": "ExportInvalidPrefix"
    },
    "ExportBlobContainerDoesNotExist": {
      "id": 5002,
      "name": "ExportBlobContainerDoesNotExist"
    },
    "ExportEventNameNotFound": {
      "id": 5003,
      "name": "ExportEventNameNotFound"
    },
    "ExportExportTitleIdNotFound": {
      "id": 5004,
      "name": "ExportExportTitleIdNotFound"
    },
    "ExportCouldNotUpdate": {
      "id": 5005,
      "name": "ExportCouldNotUpdate"
    },
    "ExportInvalidStorageType": {
      "id": 5006,
      "name": "ExportInvalidStorageType"
    },
    "ExportAmazonBucketDoesNotExist": {
      "id": 5007,
      "name": "ExportAmazonBucketDoesNotExist"
    },
    "ExportInvalidBlobStorage": {
      "id": 5008,
      "name": "ExportInvalidBlobStorage"
    },
    "ExportKustoException": {
      "id": 5009,
      "name": "ExportKustoException"
    },
    "ExportKustoExceptionPartialErrorOnNewExport": {
      "id": 5010,
      "name": "ExportKustoExceptionPartialErrorOnNewExport"
    },
    "ExportKustoExceptionEdit": {
      "id": 5011,
      "name": "ExportKustoExceptionEdit"
    },
    "ExportKustoConnectionFailed": {
      "id": 5012,
      "name": "ExportKustoConnectionFailed"
    },
    "ExportUnknownError": {
      "id": 5013,
      "name": "ExportUnknownError"
    },
    "ExportCantEditPendingExport": {
      "id": 5014,
      "name": "ExportCantEditPendingExport"
    },
    "ExportLimitExports": {
      "id": 5015,
      "name": "ExportLimitExports"
    },
    "ExportLimitEvents": {
      "id": 5016,
      "name": "ExportLimitEvents"
    },
    "TitleNotEnabledForParty": {
      "id": 6000,
      "name": "TitleNotEnabledForParty"
    },
    "PartyVersionNotFound": {
      "id": 6001,
      "name": "PartyVersionNotFound"
    },
    "MultiplayerServerBuildReferencedByMatchmakingQueue": {
      "id": 6002,
      "name": "MultiplayerServerBuildReferencedByMatchmakingQueue"
    },
    "SnapshotNotFound": {
      "id": 11000,
      "name": "SnapshotNotFound"
    }
  }
}